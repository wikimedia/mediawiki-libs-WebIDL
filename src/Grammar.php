<?php
/*
 * Generated by WikiPEG
 */





/* File-scope initializer */
namespace Wikimedia\WebIDL;




class Grammar extends \Wikimedia\WikiPEG\PEGParserBase {
	// initializer
	
	/** @var string */
	private $filename = '';
	/** @var int */
	private $lineNum = 1;
	/** @var bool */
	private $keepComments = true;
	/** @var string[]|null */
	private $lastComments = null;
	/** @var ?string */
	private $lastWS = null;

	/**
	 * @param string $contents
	 * @param array $options
	 * @return array
	 */
	public static function load( string $contents, array $options = [] ) {
		$g = new Grammar();
		$g->filename = $options['sourceName'] ?? "<unknown>";
		$g->keepComments = $options['keepComments'] ?? true;
		$ast = $g->parse( $contents );
		if ( $options['concrete'] ?? false ) {
			$ast[] = [
				'type' => 'eof',
				'value' => '',
				'trivia' => $g->lastWS ?? ''
			];
		}
		return $ast;
	}

	private function withComments( $ast ) {
		if ( !$this->keepComments ) {
			unset( $ast['leadingComments'] );
			unset( $ast['trailingComments'] );
		}
		return $ast;
	}

	private static $basicType = [
		'type' => null,
		'extAttrs' => [],
		'generic' => '',
		'nullable' => false,
		'union' => false,
		'idlType' => null,
	];

	private static $basicExtAttr = [
		'type' => 'extended-attribute',
		'name' => null,
		'arguments' => [],
		'rhs' => null,
	];

	private static function setType(array &$t, string $val): array {
		if ( ($t['type'] ?? null) !== null) {
			return $t;
		}
		$t['type'] = $val;
		if (is_array($t['idlType'] ?? null)) {
			if ($t['generic'] === '' && $t['union'] === false) {
				self::setType($t['idlType'], $val);
			} else if ($t['union'] === false) {
				foreach ($t['idlType'] as &$tt) {
					self::setType($tt, $val);
				}
			}
		}
		return $t;
	}


	// cache init
	

	// expectations
	protected $expectations = [
		0 => ["type" => "end", "description" => "end of input"],
1 => ["type" => "other", "description" => "Definition"],
2 => ["type" => "literal", "value" => "[", "description" => "\"[\""],
3 => ["type" => "other", "description" => "ExtendedAttribute"],
4 => ["type" => "literal", "value" => "]", "description" => "\"]\""],
5 => ["type" => "other", "description" => "CallbackOrInterfaceOrMixin"],
6 => ["type" => "other", "description" => "Namespace"],
7 => ["type" => "other", "description" => "Partial"],
8 => ["type" => "other", "description" => "Dictionary"],
9 => ["type" => "other", "description" => "Enum"],
10 => ["type" => "other", "description" => "Typedef"],
11 => ["type" => "other", "description" => "IncludesStatement"],
12 => ["type" => "other", "description" => "ExtendedAttributeNoArgs"],
13 => ["type" => "other", "description" => "ExtendedAttributeArgList"],
14 => ["type" => "other", "description" => "ExtendedAttributeIdent"],
15 => ["type" => "other", "description" => "ExtendedAttributeNamedArgList"],
16 => ["type" => "other", "description" => "SpecCompliantExtendedAttribute"],
17 => ["type" => "literal", "value" => ",", "description" => "\",\""],
18 => ["type" => "literal", "value" => "callback", "description" => "\"callback\""],
19 => ["type" => "other", "description" => "CallbackRestOrInterface"],
20 => ["type" => "literal", "value" => "interface", "description" => "\"interface\""],
21 => ["type" => "other", "description" => "InterfaceOrMixin"],
22 => ["type" => "literal", "value" => "namespace", "description" => "\"namespace\""],
23 => ["type" => "other", "description" => "identifier"],
24 => ["type" => "literal", "value" => "{", "description" => "\"{\""],
25 => ["type" => "literal", "value" => "}", "description" => "\"}\""],
26 => ["type" => "literal", "value" => ";", "description" => "\";\""],
27 => ["type" => "literal", "value" => "partial", "description" => "\"partial\""],
28 => ["type" => "other", "description" => "PartialDefinition"],
29 => ["type" => "literal", "value" => "dictionary", "description" => "\"dictionary\""],
30 => ["type" => "literal", "value" => "enum", "description" => "\"enum\""],
31 => ["type" => "other", "description" => "EnumValueList"],
32 => ["type" => "literal", "value" => "typedef", "description" => "\"typedef\""],
33 => ["type" => "other", "description" => "TypeWithExtendedAttributes"],
34 => ["type" => "literal", "value" => "includes", "description" => "\"includes\""],
35 => ["type" => "literal", "value" => "(", "description" => "\"(\""],
36 => ["type" => "literal", "value" => ")", "description" => "\")\""],
37 => ["type" => "literal", "value" => "=", "description" => "\"=\""],
38 => ["type" => "other", "description" => "ExtendedAttributeRHS"],
39 => ["type" => "other", "description" => "CallbackRest"],
40 => ["type" => "other", "description" => "InterfaceRest"],
41 => ["type" => "other", "description" => "MixinRest"],
42 => ["type" => "class", "value" => "[-_]", "description" => "[-_]"],
43 => ["type" => "class", "value" => "[A-Za-z]", "description" => "[A-Za-z]"],
44 => ["type" => "class", "value" => "[-_0-9A-Za-z]", "description" => "[-_0-9A-Za-z]"],
45 => ["type" => "other", "description" => "NamespaceMember"],
46 => ["type" => "other", "description" => "PartialInterfaceOrPartialMixin"],
47 => ["type" => "other", "description" => "PartialDictionary"],
48 => ["type" => "literal", "value" => ":", "description" => "\":\""],
49 => ["type" => "other", "description" => "DictionaryMemberRest"],
50 => ["type" => "other", "description" => "string"],
51 => ["type" => "other", "description" => "Type"],
52 => ["type" => "other", "description" => "Argument"],
53 => ["type" => "other", "description" => "integer"],
54 => ["type" => "other", "description" => "decimal"],
55 => ["type" => "other", "description" => "whitespace"],
56 => ["type" => "other", "description" => "comment"],
57 => ["type" => "other", "description" => "CallbackInterfaceMember"],
58 => ["type" => "literal", "value" => "mixin", "description" => "\"mixin\""],
59 => ["type" => "other", "description" => "RegularOperation"],
60 => ["type" => "literal", "value" => "readonly", "description" => "\"readonly\""],
61 => ["type" => "other", "description" => "AttributeRest"],
62 => ["type" => "other", "description" => "PartialInterfaceRest"],
63 => ["type" => "literal", "value" => "required", "description" => "\"required\""],
64 => ["type" => "literal", "value" => "\"", "description" => "\"\\\"\""],
65 => ["type" => "class", "value" => "[^\\\"]", "description" => "[^\\\"]"],
66 => ["type" => "other", "description" => "SingleType"],
67 => ["type" => "other", "description" => "UnionType"],
68 => ["type" => "other", "description" => "ArgumentRest"],
69 => ["type" => "other", "description" => "Const"],
70 => ["type" => "other", "description" => "InterfaceMember"],
71 => ["type" => "class", "value" => "[ \\t]", "description" => "[ \\t]"],
72 => ["type" => "other", "description" => "MixinMember"],
73 => ["type" => "other", "description" => "OperationRest"],
74 => ["type" => "literal", "value" => "attribute", "description" => "\"attribute\""],
75 => ["type" => "other", "description" => "AttributeName"],
76 => ["type" => "other", "description" => "DefaultValue"],
77 => ["type" => "other", "description" => "DistinguishableType"],
78 => ["type" => "other", "description" => "AnyType"],
79 => ["type" => "other", "description" => "PromiseType"],
80 => ["type" => "other", "description" => "UnionMemberType"],
81 => ["type" => "literal", "value" => "or", "description" => "\"or\""],
82 => ["type" => "literal", "value" => "?", "description" => "\"?\""],
83 => ["type" => "literal", "value" => "optional", "description" => "\"optional\""],
84 => ["type" => "other", "description" => "ArgumentName"],
85 => ["type" => "literal", "value" => "-", "description" => "\"-\""],
86 => ["type" => "class", "value" => "[1-9]", "description" => "[1-9]"],
87 => ["type" => "class", "value" => "[0-9]", "description" => "[0-9]"],
88 => ["type" => "literal", "value" => "0x", "description" => "\"0x\""],
89 => ["type" => "literal", "value" => "0X", "description" => "\"0X\""],
90 => ["type" => "class", "value" => "[0-9A-Fa-f]", "description" => "[0-9A-Fa-f]"],
91 => ["type" => "literal", "value" => "0", "description" => "\"0\""],
92 => ["type" => "class", "value" => "[0-7]", "description" => "[0-7]"],
93 => ["type" => "literal", "value" => "const", "description" => "\"const\""],
94 => ["type" => "other", "description" => "ConstType"],
95 => ["type" => "other", "description" => "ConstValue"],
96 => ["type" => "other", "description" => "PartialInterfaceMember"],
97 => ["type" => "other", "description" => "Constructor"],
98 => ["type" => "other", "description" => "Stringifier"],
99 => ["type" => "other", "description" => "AttributeNameKeyword"],
100 => ["type" => "literal", "value" => "null", "description" => "\"null\""],
101 => ["type" => "other", "description" => "PrimitiveType"],
102 => ["type" => "other", "description" => "StringType"],
103 => ["type" => "literal", "value" => "object", "description" => "\"object\""],
104 => ["type" => "literal", "value" => "symbol", "description" => "\"symbol\""],
105 => ["type" => "other", "description" => "BufferRelatedType"],
106 => ["type" => "literal", "value" => "sequence", "description" => "\"sequence\""],
107 => ["type" => "literal", "value" => "FrozenArray", "description" => "\"FrozenArray\""],
108 => ["type" => "literal", "value" => "ObservableArray", "description" => "\"ObservableArray\""],
109 => ["type" => "literal", "value" => "<", "description" => "\"<\""],
110 => ["type" => "literal", "value" => ">", "description" => "\">\""],
111 => ["type" => "other", "description" => "RecordType"],
112 => ["type" => "literal", "value" => "any", "description" => "\"any\""],
113 => ["type" => "literal", "value" => "Promise", "description" => "\"Promise\""],
114 => ["type" => "other", "description" => "ArgumentNameKeyword"],
115 => ["type" => "literal", "value" => "...", "description" => "\"...\""],
116 => ["type" => "other", "description" => "BooleanLiteral"],
117 => ["type" => "other", "description" => "FloatLiteral"],
118 => ["type" => "other", "description" => "IntLiteral"],
119 => ["type" => "other", "description" => "Operation"],
120 => ["type" => "other", "description" => "StaticMember"],
121 => ["type" => "other", "description" => "Iterable"],
122 => ["type" => "other", "description" => "AsyncIterable"],
123 => ["type" => "other", "description" => "ReadOnlyMember"],
124 => ["type" => "other", "description" => "MaplikeRest"],
125 => ["type" => "other", "description" => "SetlikeRest"],
126 => ["type" => "other", "description" => "InheritAttribute"],
127 => ["type" => "literal", "value" => "constructor", "description" => "\"constructor\""],
128 => ["type" => "literal", "value" => "stringifier", "description" => "\"stringifier\""],
129 => ["type" => "other", "description" => "StringifierRest"],
130 => ["type" => "other", "description" => "OperationName"],
131 => ["type" => "literal", "value" => "async", "description" => "\"async\""],
132 => ["type" => "other", "description" => "UnsignedIntegerType"],
133 => ["type" => "other", "description" => "UnrestrictedFloatType"],
134 => ["type" => "literal", "value" => "undefined", "description" => "\"undefined\""],
135 => ["type" => "literal", "value" => "boolean", "description" => "\"boolean\""],
136 => ["type" => "literal", "value" => "byte", "description" => "\"byte\""],
137 => ["type" => "literal", "value" => "octet", "description" => "\"octet\""],
138 => ["type" => "literal", "value" => "bigint", "description" => "\"bigint\""],
139 => ["type" => "literal", "value" => "ByteString", "description" => "\"ByteString\""],
140 => ["type" => "literal", "value" => "DOMString", "description" => "\"DOMString\""],
141 => ["type" => "literal", "value" => "USVString", "description" => "\"USVString\""],
142 => ["type" => "literal", "value" => "ArrayBuffer", "description" => "\"ArrayBuffer\""],
143 => ["type" => "literal", "value" => "DataView", "description" => "\"DataView\""],
144 => ["type" => "literal", "value" => "Int8Array", "description" => "\"Int8Array\""],
145 => ["type" => "literal", "value" => "Int16Array", "description" => "\"Int16Array\""],
146 => ["type" => "literal", "value" => "Int32Array", "description" => "\"Int32Array\""],
147 => ["type" => "literal", "value" => "Uint8Array", "description" => "\"Uint8Array\""],
148 => ["type" => "literal", "value" => "Uint16Array", "description" => "\"Uint16Array\""],
149 => ["type" => "literal", "value" => "Uint32Array", "description" => "\"Uint32Array\""],
150 => ["type" => "literal", "value" => "Uint8ClampedArray", "description" => "\"Uint8ClampedArray\""],
151 => ["type" => "literal", "value" => "Float32Array", "description" => "\"Float32Array\""],
152 => ["type" => "literal", "value" => "Float64Array", "description" => "\"Float64Array\""],
153 => ["type" => "literal", "value" => "record", "description" => "\"record\""],
154 => ["type" => "literal", "value" => "deleter", "description" => "\"deleter\""],
155 => ["type" => "literal", "value" => "getter", "description" => "\"getter\""],
156 => ["type" => "literal", "value" => "inherit", "description" => "\"inherit\""],
157 => ["type" => "literal", "value" => "iterable", "description" => "\"iterable\""],
158 => ["type" => "literal", "value" => "maplike", "description" => "\"maplike\""],
159 => ["type" => "literal", "value" => "setlike", "description" => "\"setlike\""],
160 => ["type" => "literal", "value" => "setter", "description" => "\"setter\""],
161 => ["type" => "literal", "value" => "static", "description" => "\"static\""],
162 => ["type" => "literal", "value" => "unrestricted", "description" => "\"unrestricted\""],
163 => ["type" => "literal", "value" => "true", "description" => "\"true\""],
164 => ["type" => "literal", "value" => "false", "description" => "\"false\""],
165 => ["type" => "literal", "value" => "-Infinity", "description" => "\"-Infinity\""],
166 => ["type" => "literal", "value" => "Infinity", "description" => "\"Infinity\""],
167 => ["type" => "literal", "value" => "NaN", "description" => "\"NaN\""],
168 => ["type" => "other", "description" => "SpecialOperation"],
169 => ["type" => "other", "description" => "StaticMemberRest"],
170 => ["type" => "other", "description" => "ReadOnlyMemberRest"],
171 => ["type" => "other", "description" => "OperationNameKeyword"],
172 => ["type" => "literal", "value" => "unsigned", "description" => "\"unsigned\""],
173 => ["type" => "other", "description" => "IntegerType"],
174 => ["type" => "other", "description" => "FloatType"],
175 => ["type" => "other", "description" => "decimal_integer"],
176 => ["type" => "other", "description" => "hex_integer"],
177 => ["type" => "other", "description" => "octal_integer"],
178 => ["type" => "other", "description" => "Special"],
179 => ["type" => "literal", "value" => "short", "description" => "\"short\""],
180 => ["type" => "literal", "value" => "long", "description" => "\"long\""],
181 => ["type" => "literal", "value" => "float", "description" => "\"float\""],
182 => ["type" => "literal", "value" => "double", "description" => "\"double\""],
	];

	// actions
	private function a0($d) {
 return $d; 
}
private function a1($r) {

  $c = array_values(array_filter($r, function($v) { return $v[0] === '/'; }));
  $this->lastComments = $c;
  $this->lastWS = implode( '', $r );
  return $c;

}
private function a2($c, $e, $d) {

      $d['extAttrs'] = $e;
      $d['leadingComments'] = $c;
      return $this->withComments($d);
    
}
private function a3() {

    $r = $this->lastComments; $this->lastComments = null; return $r;

}
private function a4($e, $rest) {
 array_unshift($rest, $e); return $rest; 
}
private function a5() {
 return []; 
}
private function a6($nl) {
 $this->lineNum++; return $nl; 
}
private function a7($c) {
 return $c; 
}
private function a8($im) {
 return $im; 
}
private function a9($name, $m) {

    return [
        'type' => 'namespace',
        'name' => $name,
        'inheritance' => null,
        'partial' => false,
        'members' => $m,
    ];

}
private function a10($p) {

    $p['partial'] = true; return $p;

}
private function a11($name, $inh, $m) {

        return [
            'type' => 'dictionary',
            'name' => $name,
            'partial' => false,
            'members' => $m,
            'inheritance' => $inh,
        ];
    
}
private function a12($name, $vals) {

    return [
        'type' => 'enum',
        'name' => $name,
        'values' => $vals,
    ];

}
private function a13($t, $name) {

    return [
        'type' => 'typedef',
         'name' => $name,
         'idlType' => self::setType($t, 'typedef-type'),
    ];

}
private function a14($target, $incl) {

    return [
        'type' => 'includes',
        'target' => $target,
        'includes' => $incl,
    ];

}
private function a15($name) {

    return [ 'name' => $name ] + self::$basicExtAttr;

}
private function a16($name, $args) {

    return [ 'name' => $name, 'arguments' => $args ] + self::$basicExtAttr;

}
private function a17($name, $rhs) {

    return [
        'name' => $name,
        'rhs' => $rhs,
    ] + self::$basicExtAttr;

}
private function a18($name, $rhs, $args) {

    return [
        'name' => $name,
        'arguments' => $args,
        'rhs' => [ 'type' => 'identifier', 'value' => $rhs ],
    ] + self::$basicExtAttr;

}
private function a19($name, $m) {

    return [
        'type' => 'callback interface',
        'name' => $name,
        'inheritance' => null,
        'members' => $m,
        'partial' => false,
    ];

}
private function a20($s) {

        return $s[0] == "_" ? substr($s, 1) : $s ;
    
}
private function a21($c, $e, $m) {

      $m['extAttrs'] = $e;
      $m['leadingComments'] = $c;
      return $this->withComments( $m );
    
}
private function a22($p) {
 return $p; 
}
private function a23($name) {
return $name;
}
private function a24($s, $vals) {

    array_unshift( $vals, [
        'type' => 'enum-value',
        'value' => $s,
    ] );
    return $vals;

}
private function a25($e, $t) {

        $t['extAttrs'] = $e; return $t;
    
}
private function a26($a, $rest) {
 array_unshift($rest, $a); return $rest; 
}
private function a27($rhs) {

        return [ 'type' => 'identifier', 'value' => $rhs ];
    
}
private function a28($s, $s2) {
return $s2;
}
private function a29($s, $rest) {

        array_unshift($rest, $s);
        $val = array_map(function($item) {
            return [ 'value' => $item ];
        }, $rest);
        return [ 'type' => 'identifier-list', 'value' => $val ];
    
}
private function a30($s) {

        return [ 'type' => 'string', 'value' => $s ];
    
}
private function a31($s, $rest) {

        array_unshift($rest, $s);
        $val = array_map(function($item) {
            return [ 'value' => $item ];
        }, $rest);
        return [ 'type' => 'string-list', 'value' => $val ];
    
}
private function a32($s) {

        return [ 'type' => 'integer', 'value' => $s ];
    
}
private function a33($s, $rest) {

        array_unshift($rest, $s);
        $val = array_map(function($item) {
            return [ 'value' => $item ];
        }, $rest);
        return [ 'type' => 'integer-list', 'value' => $val ];
    
}
private function a34($s) {

        return [ 'type' => 'decimal', 'value' => $s ];
    
}
private function a35($s, $rest) {

        array_unshift($rest, $s);
        $val = array_map(function($item) {
            return [ 'value' => $item ];
        }, $rest);
        return [ 'type' => 'decimal-list', 'value' => $val ];
    
}
private function a36($name, $t, $args) {

    return [
        'type' => 'callback',
         'name' => $name,
         'idlType' => self::setType($t, 'return-type'),
         'arguments' => $args,
    ];

}
private function a37($name, $inh, $m, $c) {

    return $this->withComments( [
        'type' => 'interface',
        'name' => $name,
        'inheritance' => $inh,
        'members' => $m,
        'partial' => false,
        'trailingComments' => $c,
    ] );

}
private function a38($name, $m) {

    return [
        'type' => 'interface mixin',
        'name' => $name,
        'inheritance' => null,
        'partial' => false,
        'members' => $m,
    ];

}
private function a39($k) {
 return $k; 
}
private function a40($s) {
 return $s; 
}
private function a41($a) {
 $a['readonly'] = true; return $a; 
}
private function a42($name, $m) {

       return [
           'type' => 'dictionary',
           'name' => $name,
           'partial' => true,
           'members' => $m,
           'inheritance' => null,
       ];
   
}
private function a43($t, $name) {

      return [
          'type' => 'field',
          'name' => $name,
          'required' => true,
          'idlType' => self::setType($t, 'dictionary-type'),
          'default' => null,
      ];
    
}
private function a44($t, $name, $d) {

      return [
          'type' => 'field',
          'name' => $name,
          'required' => false,
          'idlType' => self::setType($t, 'dictionary-type'),
          'default' => $d
      ];
  
}
private function a45($vals) {
 return $vals; 
}
private function a46($t, $n) {
 $t['nullable'] = ($n !== null); return $t; 
}
private function a47($e, $a) {

        $a['extAttrs'] = $e; return $a;
    
}
private function a48($m, $n) {

    return $m * $n;

}
private function a49($s) {
 return floatval( $s ); 
}
private function a50() {
 return null; 
}
private function a51($r) {

  return array_values(array_filter($r, function($v) { return $v !== null; }));

}
private function a52($t, $o) {

    $o['idlType'] = self::setType($t, 'return-type');
    return $o;

}
private function a53($t, $name, $c) {

    return $this->withComments( [
        'type' => 'attribute',
        'name' => $name,
        'special' => '',
        'readonly' => false,
        'idlType' => self::setType($t, 'attribute-type'),
        'trailingComments' => $c,
    ] );

}
private function a54($name, $m) {

    return [
        'type' => 'interface',
        'name' => $name,
        'inheritance' => null,
        'members' => $m,
    ];

}
private function a55($val) {
 return $val; 
}
private function a56($s, $vals) {

    array_unshift( $vals, [
        'type' => 'enum-value',
        'value' => $s,
    ] );
    return $vals;
  
}
private function a57($t, $t2) {
 return $t2; 
}
private function a58($t, $rest) {

        array_unshift($rest, $t);
        return [ 'idlType' => $rest, 'union' => true ] + self::$basicType;
    
}
private function a59() {
 return true; 
}
private function a60($t, $name, $d) {

      return [
          'type' => 'argument',
          'default' => $d,
          'optional' => true,
          'variadic' => false,
          'idlType' => self::setType($t, 'argument-type'),
          'name' => $name,
      ];
  
}
private function a61($t, $e, $name) {

      return [
          'type' => 'argument',
          'default' => null,
          'optional' => false,
          'variadic' => ($e !== null),
          'idlType' => self::setType($t, 'argument-type'),
          'name' => $name,
      ];
  
}
private function a62() {
 return -1; 
}
private function a63() {
 return 1; 
}
private function a64($s) {
 return intval($s); 
}
private function a65($s) {
 return hexdec($s); 
}
private function a66($s) {
 return octdec( $s ); 
}
private function a67($t, $name, $v, $c) {

    return $this->withComments( [
        'type' => 'const',
        'idlType' => $t,
        'name' => $name,
        'value' => $v,
        'trailingComments' => $c,
    ] );

}
private function a68($ro, $a) {

      $a['readonly'] = ($ro !== null);
      return $a;
  
}
private function a69($name, $args, $c) {

    return $this->withComments( [
        'type' => 'operation',
        'special' => '',
        'idlType' => null,
        'name' => $name,
        'arguments' => $args,
        'extAttrs' => null,
        'trailingComments' => $c,
    ] );

}
private function a70($id) {
 return $id; 
}
private function a71($s) {
 return [ 'type' => 'string', 'value' => $s ]; 
}
private function a72() {
 return [ 'type' => 'sequence', 'value' => [] ]; 
}
private function a73() {
 return [ 'type' => 'dictionary' ]; 
}
private function a74() {
 return [ 'type' => 'null' ]; 
}
private function a75($t) {

        return [ 'idlType' => $t ] + self::$basicType;
    
}
private function a76($g, $t) {

        return [ 'idlType' => [$t], 'generic' => $g ] + self::$basicType;
    
}
private function a77($t) {

      return [ 'idlType' => $t ] + self::$basicType;
  
}
private function a78($dt, $n) {
 $dt['nullable'] = ($n !== null); return $dt; 
}
private function a79() {

      return [ 'idlType' => 'any' ] + self::$basicType;
    
}
private function a80($t) {

        if ( $t['idlType'] === 'void' ) { $t['type'] = 'return-type'; }
        return [ 'idlType' => [$t], 'generic' => 'Promise' ] + self::$basicType;
    
}
private function a81($t, $n) {

        $t['nullable'] = ($n !== null); return $t;
    
}
private function a82($name) {
 return $name; 
}
private function a83($t) {

        return [ 'type' => 'const-type', 'idlType' => $t ] + self::$basicType;
    
}
private function a84($args, $c) {

        return $this->withComments( [
          'type' => 'constructor',
          'arguments' => $args,
          'trailingComments' => $c,
        ] );
  
}
private function a85($rest) {

    $rest['special'] = 'stringifier';
    return $rest;

}
private function a86($v) {
 return $v; 
}
private function a87($t1, $t2) {

        $t1 = [ 'idlType' => $t1 ] + self::$basicType;
        return [ 'idlType' => [$t1,$t2], 'generic' => 'record' ] + self::$basicType;
    
}
private function a88($v) {

        return [ 'type' => 'boolean', 'value' => ($v === "true") ];
    
}
private function a89($s) {

        return [ 'type' => 'number', 'value' => $s ];
    
}
private function a90() {

        return [ 'type' => 'Infinity', 'negative' => true ];
    
}
private function a91() {

        return [ 'type' => 'Infinity', 'negative' => false ];
    
}
private function a92() {

        return [ 'type' => 'NaN' ];
    
}
private function a93($rest) {

    $rest['special'] = 'static';
    return $rest;

}
private function a94($t1, $t2, $c) {

        return $this->withComments( [
            'type' => 'iterable',
            'idlType' => $t2 ? [ $t1, $t2 ] : [ $t1 ],
            'readonly' => false,
            'async' => false,
            'arguments' => [],
            'trailingComments' => $c,
        ] );
    
}
private function a95($t1, $t2, $args, $c) {

        return $this->withComments( [
            'type' => 'iterable',
            'idlType' => $t2 ? [ $t1, $t2 ] : [ $t1 ],
            'readonly' => false,
            'async' => true,
            'arguments' => $args ?? [],
            'trailingComments' => $c,
        ] );
    
}
private function a96($m) {

    $m['readonly'] = true; return $m;

}
private function a97($t1, $t2, $c) {

        return $this->withComments( [
            'type' => 'maplike',
            'idlType' => [ $t1, $t2 ],
            'readonly' => false,
            'async' => false,
            'arguments' => [],
            'trailingComments' => $c,
        ] );
    
}
private function a98($t, $c) {

         return $this->withComments( [
             'type' => 'setlike',
             'idlType' => [ $t ],
             'readonly' => false,
             'async' => false,
             'arguments' => [],
             'trailingComments' => $c,
         ] );
    
}
private function a99($a) {

    $a['special'] = 'inherit';
    return $a;

}
private function a100($ro, $a) {

    $a['readonly'] = ($ro !== null);
    return $a;
  
}
private function a101($c) {

    return $this->withComments( [
        'type' => 'operation',
        'name' => '',
        'arguments' => [],
        'special' => 'stringifier',
        'trailingComments' => $c,
    ] );

}
private function a102($t) {
 return "unsigned $t"; 
}
private function a103($t) {
 return "unrestricted $t"; 
}
private function a104($s, $o) {

    $o['special'] = $s; return $o;

}
private function a105($t) {
 return $t; 
}
private function a106($args) {
 return $args; 
}
private function a107($l) {
 return $l ? "long long" : "long"; 
}

	// generated
	private function parsestart($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $this->discard_();
  $r3 = $this->parseDefinitions($silence);
  // d <- $r3
  $r1 = true;
  seq_1:
  $this->savedPos = $p2;
  $r1 = $this->a0($r3);
  // free $p2
  return $r1;
}
private function discard_() {
  $p2 = $this->currPos;
  $r3 = [];
  for (;;) {
    // start choice_1
    $p5 = $this->currPos;
    // start seq_1
    $p6 = $this->currPos;
    if (strspn($this->input, "\x09\x0a\x0d ", $this->currPos, 1) !== 0) {
      $r7 = true;
      $r7 = false;
      $this->currPos = $p6;
    } else {
      $r7 = self::$FAILED;
      $r4 = self::$FAILED;
      goto seq_1;
    }
    $r4 = $this->discardwhitespace();
    if ($r4===self::$FAILED) {
      $this->currPos = $p6;
      $r4 = self::$FAILED;
      goto seq_1;
    }
    seq_1:
    if ($r4!==self::$FAILED) {
      $r4 = substr($this->input, $p5, $this->currPos - $p5);
      goto choice_1;
    } else {
      $r4 = self::$FAILED;
    }
    // free $p6
    // free $p5
    $p5 = $this->currPos;
    // start seq_2
    $p6 = $this->currPos;
    $r8 = $this->input[$this->currPos] ?? '';
    if ($r8 === "/") {
      $r8 = false;
      $this->currPos = $p6;
    } else {
      $r8 = self::$FAILED;
      $r4 = self::$FAILED;
      goto seq_2;
    }
    $r4 = $this->discardcomment();
    if ($r4===self::$FAILED) {
      $this->currPos = $p6;
      $r4 = self::$FAILED;
      goto seq_2;
    }
    seq_2:
    if ($r4!==self::$FAILED) {
      $r4 = substr($this->input, $p5, $this->currPos - $p5);
    } else {
      $r4 = self::$FAILED;
    }
    // free $p6
    // free $p5
    choice_1:
    if ($r4!==self::$FAILED) {
      $r3[] = $r4;
    } else {
      break;
    }
  }
  // r <- $r3
  // free $r4
  // free $r7,$r8
  $r1 = $r3;
  $this->savedPos = $p2;
  $r1 = $this->a1($r3);
  // free $p2
  return $r1;
}
private function parseDefinitions($silence) {
  $r1 = [];
  for (;;) {
    $p3 = $this->currPos;
    // start seq_1
    $p4 = $this->currPos;
    $r5 = $this->parseleadingComments($silence);
    // c <- $r5
    $r6 = $this->parseExtendedAttributeList($silence);
    // e <- $r6
    if ($r6===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // start seq_2
    $p8 = $this->currPos;
    $r9 = $this->input[$this->currPos] ?? '';
    if (preg_match("/[\\-A-Z_a-z]/A", $r9)) {
      $r9 = false;
      $this->currPos = $p8;
    } else {
      $r9 = self::$FAILED;
      if (!$silence) { $this->fail(1); }
      $r7 = self::$FAILED;
      goto seq_2;
    }
    $r7 = $this->parseDefinition($silence);
    if ($r7===self::$FAILED) {
      $this->currPos = $p8;
      $r7 = self::$FAILED;
      goto seq_2;
    }
    seq_2:
    // d <- $r7
    if ($r7===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // free $p8
    $r2 = true;
    seq_1:
    if ($r2!==self::$FAILED) {
      $this->savedPos = $p3;
      $r2 = $this->a2($r5, $r6, $r7);
      $r1[] = $r2;
    } else {
      break;
    }
    // free $r9
    // free $p4
    // free $p3
  }
  // free $r2
  return $r1;
}
private function discardwhitespace() {
  $r1 = self::$FAILED;
  for (;;) {
    // start choice_1
    $r2 = $this->input[$this->currPos] ?? '';
    if ($r2 === "\x09" || $r2 === " ") {
      $this->currPos++;
      goto choice_1;
    } else {
      $r2 = self::$FAILED;
    }
    // start seq_1
    $p3 = $this->currPos;
    $r4 = $this->input[$this->currPos] ?? '';
    if ($r4 === "\x0a" || $r4 === "\x0d") {
      $r4 = false;
      $this->currPos = $p3;
    } else {
      $r4 = self::$FAILED;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    $r2 = $this->discardeol();
    if ($r2===self::$FAILED) {
      $this->currPos = $p3;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    seq_1:
    // free $p3
    choice_1:
    if ($r2!==self::$FAILED) {
      $r1 = true;
    } else {
      break;
    }
  }
  // free $r2
  return $r1;
}
private function discardcomment() {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "//", $this->currPos, 2, false) === 0) {
    $r3 = true;
    $this->currPos += 2;
  } else {
    $r3 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r4 = strcspn($this->input, "\x0a\x0d", $this->currPos);
  $this->currPos += $r4;
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $r3,$r4
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "/*", $this->currPos, 2, false) === 0) {
    $r4 = true;
    $this->currPos += 2;
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  for (;;) {
    // start choice_2
    $r5 = strcspn($this->input, "\x0a\x0d*", $this->currPos);
    if ($r5 > 0) {
      $this->currPos += $r5;
      goto choice_2;
    } else {
      $r5 = self::$FAILED;
    }
    // start seq_3
    $p6 = $this->currPos;
    $r7 = $this->input[$this->currPos] ?? '';
    if ($r7 === "\x0a" || $r7 === "\x0d") {
      $r7 = false;
      $this->currPos = $p6;
    } else {
      $r7 = self::$FAILED;
      $r5 = self::$FAILED;
      goto seq_3;
    }
    $r5 = $this->discardeol();
    if ($r5===self::$FAILED) {
      $this->currPos = $p6;
      $r5 = self::$FAILED;
      goto seq_3;
    }
    seq_3:
    if ($r5!==self::$FAILED) {
      goto choice_2;
    }
    // free $p6
    // start seq_4
    $p6 = $this->currPos;
    if (($this->input[$this->currPos] ?? null) === "*") {
      $r8 = true;
      $this->currPos++;
    } else {
      $r8 = self::$FAILED;
      $r5 = self::$FAILED;
      goto seq_4;
    }
    $p10 = $this->currPos;
    if (($this->input[$this->currPos] ?? null) === "/") {
      $r9 = true;
    } else {
      $r9 = self::$FAILED;
    }
    if ($r9 === self::$FAILED) {
      $r9 = false;
    } else {
      $r9 = self::$FAILED;
      $this->currPos = $p10;
      $this->currPos = $p6;
      $r5 = self::$FAILED;
      goto seq_4;
    }
    // free $p10
    $r5 = true;
    seq_4:
    // free $r8,$r9
    // free $p6
    choice_2:
    if ($r5===self::$FAILED) {
      break;
    }
  }
  // free $r5
  // free $r7
  $r3 = true;
  // free $r3
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "*/", $this->currPos, 2, false) === 0) {
    $r3 = true;
    $this->currPos += 2;
  } else {
    $r3 = self::$FAILED;
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = true;
  seq_2:
  // free $r4,$r3
  // free $p2
  choice_1:
  return $r1;
}
private function parseleadingComments($silence) {
  $p2 = $this->currPos;
  $r1 = true;
  $this->savedPos = $p2;
  $r1 = $this->a3();
  // free $p2
  return $r1;
}
private function parseExtendedAttributeList($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "[") {
    $r4 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(2); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p6 = $this->currPos;
  if (strcspn($this->input, "\x09\x0a\x0d ),]}", $this->currPos, 1) !== 0) {
    $r7 = true;
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(3); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parseExtendedAttribute($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // e <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $r8 = $this->parseExtendedAttributes($silence);
  // rest <- $r8
  if (($this->input[$this->currPos] ?? null) === "]") {
    $r9 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(4); }
    $r9 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a4($r5, $r8);
    goto choice_1;
  }
  // free $r4,$r7,$r9
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_3
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "[") {
    $r9 = true;
  } else {
    $r9 = self::$FAILED;
  }
  if ($r9 === self::$FAILED) {
    $r9 = false;
  } else {
    $r9 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = true;
  seq_3:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a5();
  }
  // free $r9
  // free $p3
  // free $p2
  choice_1:
  return $r1;
}
private function parseDefinition($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if ($r3 === "c" || $r3 === "i") {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(5); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseCallbackOrInterfaceOrMixin($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  $r4 = $this->input[$this->currPos] ?? '';
  if ($r4 === "n") {
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(6); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseNamespace($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  $r5 = $this->input[$this->currPos] ?? '';
  if ($r5 === "p") {
    $r5 = false;
    $this->currPos = $p2;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(7); }
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->parsePartial($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_4
  $p2 = $this->currPos;
  $r6 = $this->input[$this->currPos] ?? '';
  if ($r6 === "d") {
    $r6 = false;
    $this->currPos = $p2;
  } else {
    $r6 = self::$FAILED;
    if (!$silence) { $this->fail(8); }
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $r1 = $this->parseDictionary($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  seq_4:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_5
  $p2 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if ($r7 === "e") {
    $r7 = false;
    $this->currPos = $p2;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(9); }
    $r1 = self::$FAILED;
    goto seq_5;
  }
  $r1 = $this->parseEnum($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_5;
  }
  seq_5:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_6
  $p2 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if ($r8 === "t") {
    $r8 = false;
    $this->currPos = $p2;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(10); }
    $r1 = self::$FAILED;
    goto seq_6;
  }
  $r1 = $this->parseTypedef($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_6;
  }
  seq_6:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_7
  $p2 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r9)) {
    $r9 = false;
    $this->currPos = $p2;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(11); }
    $r1 = self::$FAILED;
    goto seq_7;
  }
  $r1 = $this->parseIncludesStatement($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_7;
  }
  seq_7:
  // free $p2
  choice_1:
  return $r1;
}
private function discardeol() {
  $p2 = $this->currPos;
  // start choice_1
  if (($this->input[$this->currPos] ?? null) === "\x0a") {
    $r3 = "\x0a";
    $this->currPos++;
    goto choice_1;
  } else {
    $r3 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "\x0d\x0a", $this->currPos, 2, false) === 0) {
    $r3 = "\x0d\x0a";
    $this->currPos += 2;
    goto choice_1;
  } else {
    $r3 = self::$FAILED;
  }
  if (($this->input[$this->currPos] ?? null) === "\x0d") {
    $r3 = "\x0d";
    $this->currPos++;
  } else {
    $r3 = self::$FAILED;
  }
  choice_1:
  // nl <- $r3
  $r1 = $r3;
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a6($r3);
  }
  // free $p2
  return $r1;
}
private function parseExtendedAttribute($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r3)) {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(12); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseExtendedAttributeNoArgs($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  $r4 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r4)) {
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(13); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseExtendedAttributeArgList($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p2;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(14); }
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->parseExtendedAttributeIdent($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_4
  $p2 = $this->currPos;
  $r6 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r6)) {
    $r6 = false;
    $this->currPos = $p2;
  } else {
    $r6 = self::$FAILED;
    if (!$silence) { $this->fail(15); }
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $r1 = $this->parseExtendedAttributeNamedArgList($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  seq_4:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  $p2 = $this->currPos;
  // start seq_5
  $p7 = $this->currPos;
  if (strcspn($this->input, "\x09\x0a\x0d ),]}", $this->currPos, 1) !== 0) {
    $r8 = true;
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(16); }
    $r1 = self::$FAILED;
    goto seq_5;
  }
  $r1 = $this->discardSpecCompliantExtendedAttribute();
  if ($r1===self::$FAILED) {
    $this->currPos = $p7;
    $r1 = self::$FAILED;
    goto seq_5;
  }
  seq_5:
  if ($r1!==self::$FAILED) {
    $r1 = substr($this->input, $p2, $this->currPos - $p2);
  } else {
    $r1 = self::$FAILED;
  }
  // free $p7
  // free $p2
  choice_1:
  return $r1;
}
private function parseExtendedAttributes($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === ",") {
    $r4 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(17); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p6 = $this->currPos;
  if (strcspn($this->input, "\x09\x0a\x0d ),]}", $this->currPos, 1) !== 0) {
    $r7 = true;
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(3); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parseExtendedAttribute($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // e <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $r8 = $this->parseExtendedAttributes($silence);
  // rest <- $r8
  if ($r8===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a4($r5, $r8);
    goto choice_1;
  }
  // free $r4,$r7
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  $r1 = true;
  $this->savedPos = $p2;
  $r1 = $this->a5();
  // free $p2
  choice_1:
  return $r1;
}
private function parseCallbackOrInterfaceOrMixin($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "callback", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(18); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(19); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseCallbackRestOrInterface($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // c <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a7($r6);
    goto choice_1;
  }
  // free $r4,$r5,$r8
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_3
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "interface", $this->currPos, 9, false) === 0) {
    $r8 = true;
    $this->currPos += 9;
  } else {
    if (!$silence) { $this->fail(20); }
    $r8 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  // start seq_4
  $p7 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r9)) {
    $r9 = false;
    $this->currPos = $p7;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(21); }
    $r4 = self::$FAILED;
    goto seq_4;
  }
  $r4 = $this->parseInterfaceOrMixin($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p7;
    $r4 = self::$FAILED;
    goto seq_4;
  }
  seq_4:
  // im <- $r4
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  // free $p7
  $r1 = true;
  seq_3:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a8($r4);
  }
  // free $r8,$r5,$r9
  // free $p3
  // free $p2
  choice_1:
  return $r1;
}
private function parseNamespace($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "namespace", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
  } else {
    if (!$silence) { $this->fail(22); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseidentifier($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "{") {
    $r9 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(24); }
    $r9 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r10 = $this->parseNamespaceMembers($silence);
  // m <- $r10
  if (($this->input[$this->currPos] ?? null) === "}") {
    $r11 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(25); }
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r12 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r12 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a9($r6, $r10);
  }
  // free $r4,$r5,$r8,$r9,$r11,$r12
  // free $p3
  // free $p2
  return $r1;
}
private function parsePartial($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "partial", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
  } else {
    if (!$silence) { $this->fail(27); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  if (strspn($this->input, "din", $this->currPos, 1) !== 0) {
    $r8 = true;
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(28); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parsePartialDefinition($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // p <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a10($r6);
  }
  // free $r4,$r5,$r8
  // free $p3
  // free $p2
  return $r1;
}
private function parseDictionary($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "dictionary", $this->currPos, 10, false) === 0) {
    $r4 = true;
    $this->currPos += 10;
  } else {
    if (!$silence) { $this->fail(29); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseidentifier($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $this->discard_();
  $r9 = $this->parseInheritance($silence);
  // inh <- $r9
  if (($this->input[$this->currPos] ?? null) === "{") {
    $r10 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(24); }
    $r10 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r11 = $this->parseDictionaryMembers($silence);
  // m <- $r11
  if (($this->input[$this->currPos] ?? null) === "}") {
    $r12 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(25); }
    $r12 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r13 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r13 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a11($r6, $r9, $r11);
  }
  // free $r4,$r5,$r8,$r10,$r12,$r13
  // free $p3
  // free $p2
  return $r1;
}
private function parseEnum($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "enum", $this->currPos, 4, false) === 0) {
    $r4 = true;
    $this->currPos += 4;
  } else {
    if (!$silence) { $this->fail(30); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseidentifier($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "{") {
    $r9 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(24); }
    $r9 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_3
  $p7 = $this->currPos;
  $r11 = $this->input[$this->currPos] ?? '';
  if ($r11 === "\"") {
    $r11 = false;
    $this->currPos = $p7;
  } else {
    $r11 = self::$FAILED;
    if (!$silence) { $this->fail(31); }
    $r10 = self::$FAILED;
    goto seq_3;
  }
  $r10 = $this->parseEnumValueList($silence);
  if ($r10===self::$FAILED) {
    $this->currPos = $p7;
    $r10 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // vals <- $r10
  if ($r10===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  if (($this->input[$this->currPos] ?? null) === "}") {
    $r12 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(25); }
    $r12 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r13 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r13 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a12($r6, $r10);
  }
  // free $r4,$r5,$r8,$r9,$r11,$r12,$r13
  // free $p3
  // free $p2
  return $r1;
}
private function parseTypedef($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "typedef", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
  } else {
    if (!$silence) { $this->fail(32); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(33); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseTypeWithExtendedAttributes($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  // start seq_3
  $p7 = $this->currPos;
  $r10 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r10)) {
    $r10 = false;
    $this->currPos = $p7;
  } else {
    $r10 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r9 = self::$FAILED;
    goto seq_3;
  }
  $r9 = $this->parseidentifier($silence);
  if ($r9===self::$FAILED) {
    $this->currPos = $p7;
    $r9 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // name <- $r9
  if ($r9===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r11 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a13($r6, $r9);
  }
  // free $r4,$r5,$r8,$r10,$r11
  // free $p3
  // free $p2
  return $r1;
}
private function parseIncludesStatement($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parseidentifier($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // target <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "includes", $this->currPos, 8, false) === 0) {
    $r6 = true;
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(34); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r7 = $this->discardi_();
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_3
  $p9 = $this->currPos;
  $r10 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r10)) {
    $r10 = false;
    $this->currPos = $p9;
  } else {
    $r10 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r8 = self::$FAILED;
    goto seq_3;
  }
  $r8 = $this->parseidentifier($silence);
  if ($r8===self::$FAILED) {
    $this->currPos = $p9;
    $r8 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // incl <- $r8
  if ($r8===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p9
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r11 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a14($r4, $r8);
  }
  // free $r5,$r6,$r7,$r10,$r11
  // free $p3
  // free $p2
  return $r1;
}
private function parseExtendedAttributeNoArgs($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parseidentifier($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $p7 = $this->currPos;
  $r6 = $this->input[$this->currPos] ?? '';
  if (!($r6 === "(" || $r6 === "=")) {
    $r6 = self::$FAILED;
  }
  if ($r6 === self::$FAILED) {
    $r6 = false;
  } else {
    $r6 = self::$FAILED;
    $this->currPos = $p7;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a15($r4);
  }
  // free $r5,$r6
  // free $p3
  // free $p2
  return $r1;
}
private function parseExtendedAttributeArgList($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parseidentifier($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(35); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r7 = $this->parseArgumentList($silence);
  // args <- $r7
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r8 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(36); }
    $r8 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a16($r4, $r7);
  }
  // free $r5,$r6,$r8
  // free $p3
  // free $p2
  return $r1;
}
private function parseExtendedAttributeIdent($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parseidentifier($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "=") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(37); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_3
  $p8 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\"(\\--.0-9A-Z_a-z]/A", $r9)) {
    $r9 = false;
    $this->currPos = $p8;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(38); }
    $r7 = self::$FAILED;
    goto seq_3;
  }
  $r7 = $this->parseExtendedAttributeRHS($silence);
  if ($r7===self::$FAILED) {
    $this->currPos = $p8;
    $r7 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // rhs <- $r7
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p8
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a17($r4, $r7);
  }
  // free $r5,$r6,$r9
  // free $p3
  // free $p2
  return $r1;
}
private function parseExtendedAttributeNamedArgList($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parseidentifier($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "=") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(37); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_3
  $p8 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r9)) {
    $r9 = false;
    $this->currPos = $p8;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r7 = self::$FAILED;
    goto seq_3;
  }
  $r7 = $this->parseidentifier($silence);
  if ($r7===self::$FAILED) {
    $this->currPos = $p8;
    $r7 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // rhs <- $r7
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p8
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r10 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(35); }
    $r10 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r11 = $this->parseArgumentList($silence);
  // args <- $r11
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r12 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(36); }
    $r12 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a18($r4, $r7, $r11);
  }
  // free $r5,$r6,$r9,$r10,$r12
  // free $p3
  // free $p2
  return $r1;
}
private function discardSpecCompliantExtendedAttribute() {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r3 = true;
    $this->currPos++;
  } else {
    $r3 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $this->discardExtendedAttributeInner();
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r4 = true;
    $this->currPos++;
  } else {
    $r4 = self::$FAILED;
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $this->discardExtendedAttributeRest();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $r3,$r4
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "[") {
    $r4 = true;
    $this->currPos++;
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  $this->discardExtendedAttributeInner();
  if (($this->input[$this->currPos] ?? null) === "]") {
    $r3 = true;
    $this->currPos++;
  } else {
    $r3 = self::$FAILED;
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  $this->discardExtendedAttributeRest();
  $r1 = true;
  seq_2:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $r4,$r3
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "{") {
    $r3 = true;
    $this->currPos++;
  } else {
    $r3 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $this->discard_();
  $this->discardExtendedAttributeInner();
  if (($this->input[$this->currPos] ?? null) === "}") {
    $r4 = true;
    $this->currPos++;
  } else {
    $r4 = self::$FAILED;
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $this->discard_();
  $this->discardExtendedAttributeRest();
  $r1 = true;
  seq_3:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $r3,$r4
  // free $p2
  // start seq_4
  $p2 = $this->currPos;
  $r4 = self::$FAILED;
  for (;;) {
    // start seq_5
    $p5 = $this->currPos;
    if (strcspn($this->input, "\x09\x0a\x0d (),[]{}", $this->currPos, 1) !== 0) {
      $r6 = true;
      $r6 = false;
      $this->currPos = $p5;
    } else {
      $r6 = self::$FAILED;
      $r3 = self::$FAILED;
      goto seq_5;
    }
    $r3 = $this->discardOther();
    if ($r3===self::$FAILED) {
      $this->currPos = $p5;
      $r3 = self::$FAILED;
      goto seq_5;
    }
    seq_5:
    if ($r3!==self::$FAILED) {
      $r4 = true;
    } else {
      break;
    }
    // free $p5
  }
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_4;
  }
  // free $r3
  $this->discardExtendedAttributeRest();
  $r1 = true;
  seq_4:
  // free $r4
  // free $p2
  choice_1:
  return $r1;
}
private function discardi_() {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $r4 = $this->input[$this->currPos] ?? '';
  if (!(preg_match("/[\\-0-9A-Z_a-z]/A", $r4))) {
    $r4 = self::$FAILED;
  }
  if ($r4 === self::$FAILED) {
    $r4 = false;
  } else {
    $r4 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->parse_(true);
  // c <- $r5
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a7($r5);
  }
  // free $r4
  // free $p3
  // free $p2
  return $r1;
}
private function parseCallbackRestOrInterface($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r3)) {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(39); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseCallbackRest($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  $p2 = $this->currPos;
  // start seq_2
  $p4 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "interface", $this->currPos, 9, false) === 0) {
    $r5 = true;
    $this->currPos += 9;
  } else {
    if (!$silence) { $this->fail(20); }
    $r5 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->discardi_();
  if ($r6===self::$FAILED) {
    $this->currPos = $p4;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  // start seq_3
  $p8 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r9)) {
    $r9 = false;
    $this->currPos = $p8;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r7 = self::$FAILED;
    goto seq_3;
  }
  $r7 = $this->parseidentifier($silence);
  if ($r7===self::$FAILED) {
    $this->currPos = $p8;
    $r7 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // name <- $r7
  if ($r7===self::$FAILED) {
    $this->currPos = $p4;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  // free $p8
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "{") {
    $r10 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(24); }
    $r10 = self::$FAILED;
    $this->currPos = $p4;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  $r11 = $this->parseCallbackInterfaceMembers($silence);
  // m <- $r11
  if (($this->input[$this->currPos] ?? null) === "}") {
    $r12 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(25); }
    $r12 = self::$FAILED;
    $this->currPos = $p4;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r13 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r13 = self::$FAILED;
    $this->currPos = $p4;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  $r1 = true;
  seq_2:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a19($r7, $r11);
  }
  // free $r5,$r6,$r9,$r10,$r12,$r13
  // free $p4
  // free $p2
  choice_1:
  return $r1;
}
private function parseInterfaceOrMixin($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r3)) {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(40); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseInterfaceRest($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  $r4 = $this->input[$this->currPos] ?? '';
  if ($r4 === "m") {
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(41); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseMixinRest($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // free $p2
  choice_1:
  return $r1;
}
private function parseidentifier($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start choice_1
  // start seq_2
  if (strspn($this->input, "acdegimnprstu", $this->currPos, 1) !== 0) {
    $r5 = true;
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->discardArgumentNameKeyword();
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r4!==self::$FAILED) {
    goto choice_1;
  }
  // start seq_3
  if (strspn($this->input, "ADFIU", $this->currPos, 1) !== 0) {
    $r6 = true;
    $r6 = false;
    $this->currPos = $p3;
  } else {
    $r6 = self::$FAILED;
    $r4 = self::$FAILED;
    goto seq_3;
  }
  $r4 = $this->discardBufferRelatedType();
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  if ($r4!==self::$FAILED) {
    goto choice_1;
  }
  // start seq_4
  $r7 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[BDFIN-PUa-bdfln-or-u]/A", $r7)) {
    $r7 = false;
    $this->currPos = $p3;
  } else {
    $r7 = self::$FAILED;
    $r4 = self::$FAILED;
    goto seq_4;
  }
  $r4 = $this->discardOtherIdLike();
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_4;
  }
  seq_4:
  choice_1:
  if ($r4 === self::$FAILED) {
    $r4 = false;
  } else {
    $r4 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $p9 = $this->currPos;
  // start seq_5
  // start choice_2
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "_constructor", $this->currPos, 12, false) === 0) {
    $r10 = true;
    $this->currPos += 12;
    goto choice_2;
  } else {
    $r10 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "_toString", $this->currPos, 9, false) === 0) {
    $r10 = true;
    $this->currPos += 9;
    goto choice_2;
  } else {
    $r10 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "toString", $this->currPos, 8, false) === 0) {
    $r10 = true;
    $this->currPos += 8;
  } else {
    $r10 = self::$FAILED;
  }
  choice_2:
  if ($r10===self::$FAILED) {
    $r8 = self::$FAILED;
    goto seq_5;
  }
  $r11 = $this->discardi_();
  if ($r11===self::$FAILED) {
    $this->currPos = $p9;
    $r8 = self::$FAILED;
    goto seq_5;
  }
  $r8 = true;
  seq_5:
  // free $r10,$r11
  if ($r8 === self::$FAILED) {
    $r8 = false;
  } else {
    $r8 = self::$FAILED;
    $this->currPos = $p9;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p9
  $p9 = $this->currPos;
  // start seq_6
  $p12 = $this->currPos;
  $r10 = $this->input[$this->currPos] ?? '';
  if ($r10 === "-" || $r10 === "_") {
    $this->currPos++;
  } else {
    $r10 = self::$FAILED;
    if (!$silence) { $this->fail(42); }
    $r10 = null;
  }
  $r13 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[A-Za-z]/A", $r13)) {
    $this->currPos++;
  } else {
    $r13 = self::$FAILED;
    if (!$silence) { $this->fail(43); }
    $this->currPos = $p12;
    $r11 = self::$FAILED;
    goto seq_6;
  }
  $r14 = null;
  if (preg_match("/[\\-0-9A-Z_a-z]*/A", $this->input, $r14, 0, $this->currPos)) {
    $this->currPos += strlen($r14[0]);
    $r14 = true;
  } else {
    $r14 = self::$FAILED;
    if (!$silence) { $this->fail(44); }
  }
  $r11 = true;
  seq_6:
  // s <- $r11
  if ($r11!==self::$FAILED) {
    $r11 = substr($this->input, $p9, $this->currPos - $p9);
  } else {
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $r10,$r13,$r14
  // free $p12
  // free $p9
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a20($r11);
  }
  // free $r4,$r5,$r6,$r7,$r8
  // free $p3
  // free $p2
  return $r1;
}
private function parseNamespaceMembers($silence) {
  $r1 = [];
  for (;;) {
    $p3 = $this->currPos;
    // start seq_1
    $p4 = $this->currPos;
    $r5 = $this->parseleadingComments($silence);
    // c <- $r5
    $r6 = $this->parseExtendedAttributeList($silence);
    // e <- $r6
    if ($r6===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // start seq_2
    $p8 = $this->currPos;
    $r9 = $this->input[$this->currPos] ?? '';
    if (preg_match("/[(\\-A-Z_a-z]/A", $r9)) {
      $r9 = false;
      $this->currPos = $p8;
    } else {
      $r9 = self::$FAILED;
      if (!$silence) { $this->fail(45); }
      $r7 = self::$FAILED;
      goto seq_2;
    }
    $r7 = $this->parseNamespaceMember($silence);
    if ($r7===self::$FAILED) {
      $this->currPos = $p8;
      $r7 = self::$FAILED;
      goto seq_2;
    }
    seq_2:
    // m <- $r7
    if ($r7===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // free $p8
    $r2 = true;
    seq_1:
    if ($r2!==self::$FAILED) {
      $this->savedPos = $p3;
      $r2 = $this->a21($r5, $r6, $r7);
      $r1[] = $r2;
    } else {
      break;
    }
    // free $r9
    // free $p4
    // free $p3
  }
  // free $r2
  return $r1;
}
private function parsePartialDefinition($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "interface", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
  } else {
    if (!$silence) { $this->fail(20); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(46); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parsePartialInterfaceOrPartialMixin($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // p <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a22($r6);
    goto choice_1;
  }
  // free $r4,$r5,$r8
  // free $p3
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if ($r8 === "d") {
    $r8 = false;
    $this->currPos = $p2;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(47); }
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->parsePartialDictionary($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_4
  $p2 = $this->currPos;
  $r5 = $this->input[$this->currPos] ?? '';
  if ($r5 === "n") {
    $r5 = false;
    $this->currPos = $p2;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(6); }
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $r1 = $this->parseNamespace($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  seq_4:
  // free $p2
  choice_1:
  return $r1;
}
private function parseInheritance($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === ":") {
    $r4 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(48); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p6 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r7)) {
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parseidentifier($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a23($r5);
  } else {
    $r1 = null;
  }
  // free $r4,$r7
  // free $p3
  // free $p2
  return $r1;
}
private function parseDictionaryMembers($silence) {
  $r1 = [];
  for (;;) {
    $p3 = $this->currPos;
    // start seq_1
    $p4 = $this->currPos;
    $r5 = $this->parseleadingComments($silence);
    // c <- $r5
    $r6 = $this->parseExtendedAttributeList($silence);
    // e <- $r6
    if ($r6===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // start seq_2
    $p8 = $this->currPos;
    $r9 = $this->input[$this->currPos] ?? '';
    if (preg_match("/[(\\-A-Z_a-z]/A", $r9)) {
      $r9 = false;
      $this->currPos = $p8;
    } else {
      $r9 = self::$FAILED;
      if (!$silence) { $this->fail(49); }
      $r7 = self::$FAILED;
      goto seq_2;
    }
    $r7 = $this->parseDictionaryMemberRest($silence);
    if ($r7===self::$FAILED) {
      $this->currPos = $p8;
      $r7 = self::$FAILED;
      goto seq_2;
    }
    seq_2:
    // m <- $r7
    if ($r7===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // free $p8
    $r2 = true;
    seq_1:
    if ($r2!==self::$FAILED) {
      $this->savedPos = $p3;
      $r2 = $this->a21($r5, $r6, $r7);
      $r1[] = $r2;
    } else {
      break;
    }
    // free $r9
    // free $p4
    // free $p3
  }
  // free $r2
  return $r1;
}
private function parseEnumValueList($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if ($r5 === "\"") {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(50); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parsestring($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // s <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r6 = $this->parseEnumValueListComma($silence);
  // vals <- $r6
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a24($r4, $r6);
  }
  // free $r5
  // free $p3
  // free $p2
  return $r1;
}
private function parseTypeWithExtendedAttributes($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $r4 = $this->parseExtendedAttributeList($silence);
  // e <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p6 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r7)) {
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(51); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parseType($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a25($r4, $r5);
  }
  // free $r7
  // free $p3
  // free $p2
  return $r1;
}
private function parseArgumentList($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(52); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parseArgument($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // a <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r6 = $this->parseArguments($silence);
  // rest <- $r6
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a26($r4, $r6);
    goto choice_1;
  }
  // free $r5
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  $r1 = true;
  $this->savedPos = $p2;
  $r1 = $this->a5();
  // free $p2
  choice_1:
  return $r1;
}
private function parseExtendedAttributeRHS($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parseidentifier($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // rhs <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $p7 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r6 = true;
  } else {
    $r6 = self::$FAILED;
  }
  if ($r6 === self::$FAILED) {
    $r6 = false;
  } else {
    $r6 = self::$FAILED;
    $this->currPos = $p7;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a27($r4);
    goto choice_1;
  }
  // free $r5,$r6
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_3
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(35); }
    $r6 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $this->discard_();
  // start seq_4
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r5 = self::$FAILED;
    goto seq_4;
  }
  $r5 = $this->parseidentifier($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p7;
    $r5 = self::$FAILED;
    goto seq_4;
  }
  seq_4:
  // s <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  // free $p7
  $this->discard_();
  $r9 = [];
  for (;;) {
    $p7 = $this->currPos;
    // start seq_5
    $p11 = $this->currPos;
    if (($this->input[$this->currPos] ?? null) === ",") {
      $r12 = true;
      $this->currPos++;
    } else {
      if (!$silence) { $this->fail(17); }
      $r12 = self::$FAILED;
      $r10 = self::$FAILED;
      goto seq_5;
    }
    $this->discard_();
    // start seq_6
    $p14 = $this->currPos;
    $r15 = $this->input[$this->currPos] ?? '';
    if (preg_match("/[\\-A-Z_a-z]/A", $r15)) {
      $r15 = false;
      $this->currPos = $p14;
    } else {
      $r15 = self::$FAILED;
      if (!$silence) { $this->fail(23); }
      $r13 = self::$FAILED;
      goto seq_6;
    }
    $r13 = $this->parseidentifier($silence);
    if ($r13===self::$FAILED) {
      $this->currPos = $p14;
      $r13 = self::$FAILED;
      goto seq_6;
    }
    seq_6:
    // s2 <- $r13
    if ($r13===self::$FAILED) {
      $this->currPos = $p11;
      $r10 = self::$FAILED;
      goto seq_5;
    }
    // free $p14
    $this->discard_();
    $r10 = true;
    seq_5:
    if ($r10!==self::$FAILED) {
      $this->savedPos = $p7;
      $r10 = $this->a28($r5, $r13);
      $r9[] = $r10;
    } else {
      break;
    }
    // free $r12,$r15
    // free $p11
    // free $p7
  }
  // rest <- $r9
  // free $r10
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r10 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(36); }
    $r10 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $this->discard_();
  $r1 = true;
  seq_3:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a29($r5, $r9);
    goto choice_1;
  }
  // free $r6,$r8,$r10
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_7
  $p3 = $this->currPos;
  $p7 = $this->currPos;
  // start seq_8
  $r8 = $this->input[$this->currPos] ?? '';
  if ($r8 === "\"") {
    $r8 = false;
    $this->currPos = $p3;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(50); }
    $r10 = self::$FAILED;
    goto seq_8;
  }
  $r10 = $this->discardstring();
  if ($r10===self::$FAILED) {
    $this->currPos = $p3;
    $r10 = self::$FAILED;
    goto seq_8;
  }
  seq_8:
  // s <- $r10
  if ($r10!==self::$FAILED) {
    $r10 = substr($this->input, $p7, $this->currPos - $p7);
  } else {
    $r10 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_7;
  }
  // free $p7
  $this->discard_();
  $r1 = true;
  seq_7:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a30($r10);
    goto choice_1;
  }
  // free $r8
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_9
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r8 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(35); }
    $r8 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_9;
  }
  $this->discard_();
  $p7 = $this->currPos;
  // start seq_10
  $p11 = $this->currPos;
  $r15 = $this->input[$this->currPos] ?? '';
  if ($r15 === "\"") {
    $r15 = false;
    $this->currPos = $p11;
  } else {
    $r15 = self::$FAILED;
    if (!$silence) { $this->fail(50); }
    $r6 = self::$FAILED;
    goto seq_10;
  }
  $r6 = $this->discardstring();
  if ($r6===self::$FAILED) {
    $this->currPos = $p11;
    $r6 = self::$FAILED;
    goto seq_10;
  }
  seq_10:
  // s <- $r6
  if ($r6!==self::$FAILED) {
    $r6 = substr($this->input, $p7, $this->currPos - $p7);
  } else {
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_9;
  }
  // free $p11
  // free $p7
  $this->discard_();
  $r12 = [];
  for (;;) {
    $p7 = $this->currPos;
    // start seq_11
    $p11 = $this->currPos;
    if (($this->input[$this->currPos] ?? null) === ",") {
      $r17 = true;
      $this->currPos++;
    } else {
      if (!$silence) { $this->fail(17); }
      $r17 = self::$FAILED;
      $r16 = self::$FAILED;
      goto seq_11;
    }
    $this->discard_();
    $p14 = $this->currPos;
    // start seq_12
    $p19 = $this->currPos;
    $r20 = $this->input[$this->currPos] ?? '';
    if ($r20 === "\"") {
      $r20 = false;
      $this->currPos = $p19;
    } else {
      $r20 = self::$FAILED;
      if (!$silence) { $this->fail(50); }
      $r18 = self::$FAILED;
      goto seq_12;
    }
    $r18 = $this->discardstring();
    if ($r18===self::$FAILED) {
      $this->currPos = $p19;
      $r18 = self::$FAILED;
      goto seq_12;
    }
    seq_12:
    // s2 <- $r18
    if ($r18!==self::$FAILED) {
      $r18 = substr($this->input, $p14, $this->currPos - $p14);
    } else {
      $r18 = self::$FAILED;
      $this->currPos = $p11;
      $r16 = self::$FAILED;
      goto seq_11;
    }
    // free $p19
    // free $p14
    $this->discard_();
    $r16 = true;
    seq_11:
    if ($r16!==self::$FAILED) {
      $this->savedPos = $p7;
      $r16 = $this->a28($r6, $r18);
      $r12[] = $r16;
    } else {
      break;
    }
    // free $r17,$r20
    // free $p11
    // free $p7
  }
  // rest <- $r12
  // free $r16
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r16 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(36); }
    $r16 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_9;
  }
  $this->discard_();
  $r1 = true;
  seq_9:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a31($r6, $r12);
    goto choice_1;
  }
  // free $r8,$r15,$r16
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_13
  $p3 = $this->currPos;
  $p7 = $this->currPos;
  // start seq_14
  if (strspn($this->input, "-0123456789", $this->currPos, 1) !== 0) {
    $r15 = true;
    $r15 = false;
    $this->currPos = $p3;
  } else {
    $r15 = self::$FAILED;
    if (!$silence) { $this->fail(53); }
    $r16 = self::$FAILED;
    goto seq_14;
  }
  $r16 = $this->discardinteger();
  if ($r16===self::$FAILED) {
    $this->currPos = $p3;
    $r16 = self::$FAILED;
    goto seq_14;
  }
  seq_14:
  // s <- $r16
  if ($r16!==self::$FAILED) {
    $r16 = substr($this->input, $p7, $this->currPos - $p7);
  } else {
    $r16 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_13;
  }
  // free $p7
  $this->discard_();
  $p7 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === ".") {
    $r8 = true;
  } else {
    $r8 = self::$FAILED;
  }
  if ($r8 === self::$FAILED) {
    $r8 = false;
  } else {
    $r8 = self::$FAILED;
    $this->currPos = $p7;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_13;
  }
  // free $p7
  $r1 = true;
  seq_13:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a32($r16);
    goto choice_1;
  }
  // free $r15,$r8
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_15
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r8 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(35); }
    $r8 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_15;
  }
  $this->discard_();
  $p7 = $this->currPos;
  // start seq_16
  $p11 = $this->currPos;
  if (strspn($this->input, "-0123456789", $this->currPos, 1) !== 0) {
    $r20 = true;
    $r20 = false;
    $this->currPos = $p11;
  } else {
    $r20 = self::$FAILED;
    if (!$silence) { $this->fail(53); }
    $r15 = self::$FAILED;
    goto seq_16;
  }
  $r15 = $this->discardinteger();
  if ($r15===self::$FAILED) {
    $this->currPos = $p11;
    $r15 = self::$FAILED;
    goto seq_16;
  }
  seq_16:
  // s <- $r15
  if ($r15!==self::$FAILED) {
    $r15 = substr($this->input, $p7, $this->currPos - $p7);
  } else {
    $r15 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_15;
  }
  // free $p11
  // free $p7
  $this->discard_();
  $r17 = [];
  for (;;) {
    $p7 = $this->currPos;
    // start seq_17
    $p11 = $this->currPos;
    if (($this->input[$this->currPos] ?? null) === ",") {
      $r22 = true;
      $this->currPos++;
    } else {
      if (!$silence) { $this->fail(17); }
      $r22 = self::$FAILED;
      $r21 = self::$FAILED;
      goto seq_17;
    }
    $this->discard_();
    $p14 = $this->currPos;
    // start seq_18
    $p19 = $this->currPos;
    if (strspn($this->input, "-0123456789", $this->currPos, 1) !== 0) {
      $r24 = true;
      $r24 = false;
      $this->currPos = $p19;
    } else {
      $r24 = self::$FAILED;
      if (!$silence) { $this->fail(53); }
      $r23 = self::$FAILED;
      goto seq_18;
    }
    $r23 = $this->discardinteger();
    if ($r23===self::$FAILED) {
      $this->currPos = $p19;
      $r23 = self::$FAILED;
      goto seq_18;
    }
    seq_18:
    // s2 <- $r23
    if ($r23!==self::$FAILED) {
      $r23 = substr($this->input, $p14, $this->currPos - $p14);
    } else {
      $r23 = self::$FAILED;
      $this->currPos = $p11;
      $r21 = self::$FAILED;
      goto seq_17;
    }
    // free $p19
    // free $p14
    $this->discard_();
    $r21 = true;
    seq_17:
    if ($r21!==self::$FAILED) {
      $this->savedPos = $p7;
      $r21 = $this->a28($r15, $r23);
      $r17[] = $r21;
    } else {
      break;
    }
    // free $r22,$r24
    // free $p11
    // free $p7
  }
  // rest <- $r17
  // free $r21
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r21 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(36); }
    $r21 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_15;
  }
  $this->discard_();
  $r1 = true;
  seq_15:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a33($r15, $r17);
    goto choice_1;
  }
  // free $r8,$r20,$r21
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_19
  $p3 = $this->currPos;
  $p7 = $this->currPos;
  // start seq_20
  if (strspn($this->input, "-.0123456789", $this->currPos, 1) !== 0) {
    $r20 = true;
    $r20 = false;
    $this->currPos = $p3;
  } else {
    $r20 = self::$FAILED;
    if (!$silence) { $this->fail(54); }
    $r21 = self::$FAILED;
    goto seq_20;
  }
  $r21 = $this->discarddecimal();
  if ($r21===self::$FAILED) {
    $this->currPos = $p3;
    $r21 = self::$FAILED;
    goto seq_20;
  }
  seq_20:
  // s <- $r21
  if ($r21!==self::$FAILED) {
    $r21 = substr($this->input, $p7, $this->currPos - $p7);
  } else {
    $r21 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_19;
  }
  // free $p7
  $this->discard_();
  $r1 = true;
  seq_19:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a34($r21);
    goto choice_1;
  }
  // free $r20
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_21
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r20 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(35); }
    $r20 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_21;
  }
  $this->discard_();
  $p7 = $this->currPos;
  // start seq_22
  $p11 = $this->currPos;
  if (strspn($this->input, "-.0123456789", $this->currPos, 1) !== 0) {
    $r24 = true;
    $r24 = false;
    $this->currPos = $p11;
  } else {
    $r24 = self::$FAILED;
    if (!$silence) { $this->fail(54); }
    $r8 = self::$FAILED;
    goto seq_22;
  }
  $r8 = $this->discarddecimal();
  if ($r8===self::$FAILED) {
    $this->currPos = $p11;
    $r8 = self::$FAILED;
    goto seq_22;
  }
  seq_22:
  // s <- $r8
  if ($r8!==self::$FAILED) {
    $r8 = substr($this->input, $p7, $this->currPos - $p7);
  } else {
    $r8 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_21;
  }
  // free $p11
  // free $p7
  $this->discard_();
  $r22 = [];
  for (;;) {
    $p7 = $this->currPos;
    // start seq_23
    $p11 = $this->currPos;
    if (($this->input[$this->currPos] ?? null) === ",") {
      $r26 = true;
      $this->currPos++;
    } else {
      if (!$silence) { $this->fail(17); }
      $r26 = self::$FAILED;
      $r25 = self::$FAILED;
      goto seq_23;
    }
    $this->discard_();
    $p14 = $this->currPos;
    // start seq_24
    $p19 = $this->currPos;
    if (strspn($this->input, "-.0123456789", $this->currPos, 1) !== 0) {
      $r28 = true;
      $r28 = false;
      $this->currPos = $p19;
    } else {
      $r28 = self::$FAILED;
      if (!$silence) { $this->fail(54); }
      $r27 = self::$FAILED;
      goto seq_24;
    }
    $r27 = $this->discarddecimal();
    if ($r27===self::$FAILED) {
      $this->currPos = $p19;
      $r27 = self::$FAILED;
      goto seq_24;
    }
    seq_24:
    // s2 <- $r27
    if ($r27!==self::$FAILED) {
      $r27 = substr($this->input, $p14, $this->currPos - $p14);
    } else {
      $r27 = self::$FAILED;
      $this->currPos = $p11;
      $r25 = self::$FAILED;
      goto seq_23;
    }
    // free $p19
    // free $p14
    $this->discard_();
    $r25 = true;
    seq_23:
    if ($r25!==self::$FAILED) {
      $this->savedPos = $p7;
      $r25 = $this->a28($r8, $r27);
      $r22[] = $r25;
    } else {
      break;
    }
    // free $r26,$r28
    // free $p11
    // free $p7
  }
  // rest <- $r22
  // free $r25
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r25 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(36); }
    $r25 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_21;
  }
  $this->discard_();
  $r1 = true;
  seq_21:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a35($r8, $r22);
  }
  // free $r20,$r24,$r25
  // free $p3
  // free $p2
  choice_1:
  return $r1;
}
private function discardExtendedAttributeInner() {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r3 = true;
    $this->currPos++;
  } else {
    $r3 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r4 = $this->discardExtendedAttributeInner();
  if ($r4===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r5 = true;
    $this->currPos++;
  } else {
    $r5 = self::$FAILED;
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r6 = $this->discardExtendedAttributeInner();
  if ($r6===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $r3,$r4,$r5,$r6
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "[") {
    $r6 = true;
    $this->currPos++;
  } else {
    $r6 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  $r5 = $this->discardExtendedAttributeInner();
  if ($r5===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  if (($this->input[$this->currPos] ?? null) === "]") {
    $r4 = true;
    $this->currPos++;
  } else {
    $r4 = self::$FAILED;
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  $r3 = $this->discardExtendedAttributeInner();
  if ($r3===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = true;
  seq_2:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $r6,$r5,$r4,$r3
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "{") {
    $r3 = true;
    $this->currPos++;
  } else {
    $r3 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $this->discard_();
  $r4 = $this->discardExtendedAttributeInner();
  if ($r4===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  if (($this->input[$this->currPos] ?? null) === "}") {
    $r5 = true;
    $this->currPos++;
  } else {
    $r5 = self::$FAILED;
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $this->discard_();
  $r6 = $this->discardExtendedAttributeInner();
  if ($r6===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = true;
  seq_3:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $r3,$r4,$r5,$r6
  // free $p2
  // start seq_4
  $p2 = $this->currPos;
  // start seq_5
  if (strcspn($this->input, "\x09\x0a\x0d ()[]{}", $this->currPos, 1) !== 0) {
    $r5 = true;
    $r5 = false;
    $this->currPos = $p2;
  } else {
    $r5 = self::$FAILED;
    $r6 = self::$FAILED;
    goto seq_5;
  }
  $r6 = $this->discardOtherOrComma();
  if ($r6===self::$FAILED) {
    $this->currPos = $p2;
    $r6 = self::$FAILED;
    goto seq_5;
  }
  seq_5:
  if ($r6===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $r4 = $this->discardExtendedAttributeInner();
  if ($r4===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $r1 = true;
  seq_4:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $r6,$r5,$r4
  // free $p2
  $r1 = true;
  choice_1:
  return $r1;
}
private function discardExtendedAttributeRest() {
  // start seq_1
  $p2 = $this->currPos;
  if (strcspn($this->input, "\x09\x0a\x0d ),]}", $this->currPos, 1) !== 0) {
    $r3 = true;
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->discardSpecCompliantExtendedAttribute();
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1===self::$FAILED) {
    $r1 = null;
  }
  // free $p2
  return $r1;
}
private function discardOther() {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[BDFIN-PUa-bdfln-or-u]/A", $r3)) {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->discardOtherIdLike();
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  if (strspn($this->input, "acdegimnprstu", $this->currPos, 1) !== 0) {
    $r4 = true;
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->discardArgumentNameKeyword();
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  if (strspn($this->input, "ADFIU", $this->currPos, 1) !== 0) {
    $r5 = true;
    $r5 = false;
    $this->currPos = $p2;
  } else {
    $r5 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->discardBufferRelatedType();
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  $p2 = $this->currPos;
  // start seq_4
  $p6 = $this->currPos;
  $p8 = $this->currPos;
  // start choice_2
  // start seq_5
  if (strspn($this->input, "-0123456789", $this->currPos, 1) !== 0) {
    $r9 = true;
    $r9 = false;
    $this->currPos = $p6;
  } else {
    $r9 = self::$FAILED;
    $r7 = self::$FAILED;
    goto seq_5;
  }
  $r7 = $this->discardinteger();
  if ($r7===self::$FAILED) {
    $this->currPos = $p6;
    $r7 = self::$FAILED;
    goto seq_5;
  }
  seq_5:
  if ($r7!==self::$FAILED) {
    goto choice_2;
  }
  // start seq_6
  if (strspn($this->input, "-.0123456789", $this->currPos, 1) !== 0) {
    $r10 = true;
    $r10 = false;
    $this->currPos = $p6;
  } else {
    $r10 = self::$FAILED;
    $r7 = self::$FAILED;
    goto seq_6;
  }
  $r7 = $this->discarddecimal();
  if ($r7===self::$FAILED) {
    $this->currPos = $p6;
    $r7 = self::$FAILED;
    goto seq_6;
  }
  seq_6:
  if ($r7!==self::$FAILED) {
    goto choice_2;
  }
  // start seq_7
  $r11 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r11)) {
    $r11 = false;
    $this->currPos = $p6;
  } else {
    $r11 = self::$FAILED;
    $r7 = self::$FAILED;
    goto seq_7;
  }
  $r7 = $this->discardidentifier();
  if ($r7===self::$FAILED) {
    $this->currPos = $p6;
    $r7 = self::$FAILED;
    goto seq_7;
  }
  seq_7:
  if ($r7!==self::$FAILED) {
    goto choice_2;
  }
  // start seq_8
  $r12 = $this->input[$this->currPos] ?? '';
  if ($r12 === "\"") {
    $r12 = false;
    $this->currPos = $p6;
  } else {
    $r12 = self::$FAILED;
    $r7 = self::$FAILED;
    goto seq_8;
  }
  $r7 = $this->discardstring();
  if ($r7===self::$FAILED) {
    $this->currPos = $p6;
    $r7 = self::$FAILED;
    goto seq_8;
  }
  seq_8:
  if ($r7!==self::$FAILED) {
    goto choice_2;
  }
  // start seq_9
  if (preg_match("/[^\\x09-\\x0a\\x0d (-),0-9A-\\[\\]a-{}]/A", $this->input, $r13, 0, $this->currPos)) {
    $r13 = $r13[0];
    $r13 = false;
    $this->currPos = $p6;
  } else {
    $r13 = self::$FAILED;
    $r7 = self::$FAILED;
    goto seq_9;
  }
  $r7 = $this->discardotherchar();
  if ($r7===self::$FAILED) {
    $this->currPos = $p6;
    $r7 = self::$FAILED;
    goto seq_9;
  }
  seq_9:
  if ($r7!==self::$FAILED) {
    goto choice_2;
  }
  // start seq_10
  if (strspn($this->input, "-.:;<=>?", $this->currPos, 1) !== 0) {
    $r14 = true;
    $r14 = false;
    $this->currPos = $p6;
  } else {
    $r14 = self::$FAILED;
    $r7 = self::$FAILED;
    goto seq_10;
  }
  $r7 = $this->discardotherterminals();
  if ($r7===self::$FAILED) {
    $this->currPos = $p6;
    $r7 = self::$FAILED;
    goto seq_10;
  }
  seq_10:
  choice_2:
  // c <- $r7
  if ($r7!==self::$FAILED) {
    $r7 = substr($this->input, $p8, $this->currPos - $p8);
  } else {
    $r7 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  // free $p8
  $this->discard_();
  $r1 = true;
  seq_4:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a7($r7);
  }
  // free $r9,$r10,$r11,$r12,$r13,$r14
  // free $p6
  // free $p2
  choice_1:
  return $r1;
}
private function parse_($silence) {
  $p2 = $this->currPos;
  $r3 = [];
  for (;;) {
    // start choice_1
    $p5 = $this->currPos;
    // start seq_1
    $p6 = $this->currPos;
    if (strspn($this->input, "\x09\x0a\x0d ", $this->currPos, 1) !== 0) {
      $r7 = true;
      $r7 = false;
      $this->currPos = $p6;
    } else {
      $r7 = self::$FAILED;
      if (!$silence) { $this->fail(55); }
      $r4 = self::$FAILED;
      goto seq_1;
    }
    $r4 = $this->discardwhitespace();
    if ($r4===self::$FAILED) {
      $this->currPos = $p6;
      $r4 = self::$FAILED;
      goto seq_1;
    }
    seq_1:
    if ($r4!==self::$FAILED) {
      $r4 = substr($this->input, $p5, $this->currPos - $p5);
      goto choice_1;
    } else {
      $r4 = self::$FAILED;
    }
    // free $p6
    // free $p5
    $p5 = $this->currPos;
    // start seq_2
    $p6 = $this->currPos;
    $r8 = $this->input[$this->currPos] ?? '';
    if ($r8 === "/") {
      $r8 = false;
      $this->currPos = $p6;
    } else {
      $r8 = self::$FAILED;
      if (!$silence) { $this->fail(56); }
      $r4 = self::$FAILED;
      goto seq_2;
    }
    $r4 = $this->discardcomment();
    if ($r4===self::$FAILED) {
      $this->currPos = $p6;
      $r4 = self::$FAILED;
      goto seq_2;
    }
    seq_2:
    if ($r4!==self::$FAILED) {
      $r4 = substr($this->input, $p5, $this->currPos - $p5);
    } else {
      $r4 = self::$FAILED;
    }
    // free $p6
    // free $p5
    choice_1:
    if ($r4!==self::$FAILED) {
      $r3[] = $r4;
    } else {
      break;
    }
  }
  // r <- $r3
  // free $r4
  // free $r7,$r8
  $r1 = $r3;
  $this->savedPos = $p2;
  $r1 = $this->a1($r3);
  // free $p2
  return $r1;
}
private function parseCallbackRest($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parseidentifier($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "=") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(37); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_3
  $p8 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r9)) {
    $r9 = false;
    $this->currPos = $p8;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(51); }
    $r7 = self::$FAILED;
    goto seq_3;
  }
  $r7 = $this->parseType($silence);
  if ($r7===self::$FAILED) {
    $this->currPos = $p8;
    $r7 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // t <- $r7
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p8
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r10 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(35); }
    $r10 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r11 = $this->parseArgumentList($silence);
  // args <- $r11
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r12 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(36); }
    $r12 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r13 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r13 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a36($r4, $r7, $r11);
  }
  // free $r5,$r6,$r9,$r10,$r12,$r13
  // free $p3
  // free $p2
  return $r1;
}
private function parseCallbackInterfaceMembers($silence) {
  $r1 = [];
  for (;;) {
    $p3 = $this->currPos;
    // start seq_1
    $p4 = $this->currPos;
    $r5 = $this->parseleadingComments($silence);
    // c <- $r5
    $r6 = $this->parseExtendedAttributeList($silence);
    // e <- $r6
    if ($r6===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // start seq_2
    $p8 = $this->currPos;
    $r9 = $this->input[$this->currPos] ?? '';
    if (preg_match("/[(\\-A-Z_a-z]/A", $r9)) {
      $r9 = false;
      $this->currPos = $p8;
    } else {
      $r9 = self::$FAILED;
      if (!$silence) { $this->fail(57); }
      $r7 = self::$FAILED;
      goto seq_2;
    }
    $r7 = $this->parseCallbackInterfaceMember($silence);
    if ($r7===self::$FAILED) {
      $this->currPos = $p8;
      $r7 = self::$FAILED;
      goto seq_2;
    }
    seq_2:
    // m <- $r7
    if ($r7===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // free $p8
    $r2 = true;
    seq_1:
    if ($r2!==self::$FAILED) {
      $this->savedPos = $p3;
      $r2 = $this->a21($r5, $r6, $r7);
      $r1[] = $r2;
    } else {
      break;
    }
    // free $r9
    // free $p4
    // free $p3
  }
  // free $r2
  return $r1;
}
private function parseInterfaceRest($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parseidentifier($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r6 = $this->parseInheritance($silence);
  // inh <- $r6
  if (($this->input[$this->currPos] ?? null) === "{") {
    $r7 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(24); }
    $r7 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r8 = $this->parseInterfaceMembers($silence);
  // m <- $r8
  if (($this->input[$this->currPos] ?? null) === "}") {
    $r9 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(25); }
    $r9 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r10 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r10 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r11 = $this->parsec_($silence);
  // c <- $r11
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a37($r4, $r6, $r8, $r11);
  }
  // free $r5,$r7,$r9,$r10
  // free $p3
  // free $p2
  return $r1;
}
private function parseMixinRest($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "mixin", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
  } else {
    if (!$silence) { $this->fail(58); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseidentifier($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "{") {
    $r9 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(24); }
    $r9 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r10 = $this->parseMixinMembers($silence);
  // m <- $r10
  if (($this->input[$this->currPos] ?? null) === "}") {
    $r11 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(25); }
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r12 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r12 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a38($r6, $r10);
  }
  // free $r4,$r5,$r8,$r9,$r11,$r12
  // free $p3
  // free $p2
  return $r1;
}
private function discardArgumentNameKeyword() {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // start choice_1
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "async", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "attribute", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "callback", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  // start seq_2
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "const", $this->currPos, 5, false) === 0) {
    $r6 = true;
    $this->currPos += 5;
  } else {
    $r6 = self::$FAILED;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $p8 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if (!(preg_match("/[\\-0-9A-Z_a-z]/A", $r7))) {
    $r7 = self::$FAILED;
  }
  if ($r7 === self::$FAILED) {
    $r7 = false;
  } else {
    $r7 = self::$FAILED;
    $this->currPos = $p8;
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  // free $p8
  $r4 = true;
  seq_2:
  if ($r4!==self::$FAILED) {
    goto choice_1;
  }
  // free $r6,$r7
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "constructor", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "deleter", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "dictionary", $this->currPos, 10, false) === 0) {
    $r4 = true;
    $this->currPos += 10;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "enum", $this->currPos, 4, false) === 0) {
    $r4 = true;
    $this->currPos += 4;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "getter", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "includes", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "inherit", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "interface", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "iterable", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "maplike", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "mixin", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "namespace", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "partial", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "readonly", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "required", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "setlike", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "setter", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "static", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "stringifier", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "typedef", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "unrestricted", $this->currPos, 12, false) === 0) {
    $r4 = true;
    $this->currPos += 12;
  } else {
    $r4 = self::$FAILED;
  }
  choice_1:
  // k <- $r4
  if ($r4!==self::$FAILED) {
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p5
  $r7 = $this->discardi_();
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a39($r4);
  }
  // free $r7
  // free $p3
  // free $p2
  return $r1;
}
private function discardBufferRelatedType() {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // start choice_1
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "ArrayBuffer", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "DataView", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Int8Array", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Int16Array", $this->currPos, 10, false) === 0) {
    $r4 = true;
    $this->currPos += 10;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Int32Array", $this->currPos, 10, false) === 0) {
    $r4 = true;
    $this->currPos += 10;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Uint8Array", $this->currPos, 10, false) === 0) {
    $r4 = true;
    $this->currPos += 10;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Uint16Array", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Uint32Array", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Uint8ClampedArray", $this->currPos, 17, false) === 0) {
    $r4 = true;
    $this->currPos += 17;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Float32Array", $this->currPos, 12, false) === 0) {
    $r4 = true;
    $this->currPos += 12;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Float64Array", $this->currPos, 12, false) === 0) {
    $r4 = true;
    $this->currPos += 12;
  } else {
    $r4 = self::$FAILED;
  }
  choice_1:
  // s <- $r4
  if ($r4!==self::$FAILED) {
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p5
  $r6 = $this->discardi_();
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a40($r4);
  }
  // free $r6
  // free $p3
  // free $p2
  return $r1;
}
private function discardOtherIdLike() {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // start choice_1
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "ByteString", $this->currPos, 10, false) === 0) {
    $r4 = true;
    $this->currPos += 10;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "DOMString", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "FrozenArray", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Infinity", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "NaN", $this->currPos, 3, false) === 0) {
    $r4 = true;
    $this->currPos += 3;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "ObservableArray", $this->currPos, 15, false) === 0) {
    $r4 = true;
    $this->currPos += 15;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Promise", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "USVString", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "any", $this->currPos, 3, false) === 0) {
    $r4 = true;
    $this->currPos += 3;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "bigint", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "boolean", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "byte", $this->currPos, 4, false) === 0) {
    $r4 = true;
    $this->currPos += 4;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "double", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "false", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "float", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "long", $this->currPos, 4, false) === 0) {
    $r4 = true;
    $this->currPos += 4;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "null", $this->currPos, 4, false) === 0) {
    $r4 = true;
    $this->currPos += 4;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "object", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "octet", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "or", $this->currPos, 2, false) === 0) {
    $r4 = true;
    $this->currPos += 2;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "optional", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "record", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "sequence", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "short", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "symbol", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "true", $this->currPos, 4, false) === 0) {
    $r4 = true;
    $this->currPos += 4;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "unsigned", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "undefined", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
  } else {
    $r4 = self::$FAILED;
  }
  choice_1:
  // c <- $r4
  if ($r4!==self::$FAILED) {
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p5
  $r6 = $this->discardi_();
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a7($r4);
  }
  // free $r6
  // free $p3
  // free $p2
  return $r1;
}
private function parseNamespaceMember($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r3)) {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(59); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseRegularOperation($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  $p2 = $this->currPos;
  // start seq_2
  $p4 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "readonly", $this->currPos, 8, false) === 0) {
    $r5 = true;
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(60); }
    $r5 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->discardi_();
  if ($r6===self::$FAILED) {
    $this->currPos = $p4;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  // start seq_3
  $p8 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if ($r9 === "a") {
    $r9 = false;
    $this->currPos = $p8;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(61); }
    $r7 = self::$FAILED;
    goto seq_3;
  }
  $r7 = $this->parseAttributeRest($silence);
  if ($r7===self::$FAILED) {
    $this->currPos = $p8;
    $r7 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // a <- $r7
  if ($r7===self::$FAILED) {
    $this->currPos = $p4;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  // free $p8
  $r1 = true;
  seq_2:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a41($r7);
  }
  // free $r5,$r6,$r9
  // free $p4
  // free $p2
  choice_1:
  return $r1;
}
private function parsePartialInterfaceOrPartialMixin($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r3)) {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(62); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parsePartialInterfaceRest($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  $r4 = $this->input[$this->currPos] ?? '';
  if ($r4 === "m") {
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(41); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseMixinRest($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // free $p2
  choice_1:
  return $r1;
}
private function parsePartialDictionary($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "dictionary", $this->currPos, 10, false) === 0) {
    $r4 = true;
    $this->currPos += 10;
  } else {
    if (!$silence) { $this->fail(29); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseidentifier($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "{") {
    $r9 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(24); }
    $r9 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r10 = $this->parseDictionaryMembers($silence);
  // m <- $r10
  if (($this->input[$this->currPos] ?? null) === "}") {
    $r11 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(25); }
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r12 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r12 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a42($r6, $r10);
  }
  // free $r4,$r5,$r8,$r9,$r11,$r12
  // free $p3
  // free $p2
  return $r1;
}
private function parseDictionaryMemberRest($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "required", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(63); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(33); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseTypeWithExtendedAttributes($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  // start seq_3
  $p7 = $this->currPos;
  $r10 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r10)) {
    $r10 = false;
    $this->currPos = $p7;
  } else {
    $r10 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r9 = self::$FAILED;
    goto seq_3;
  }
  $r9 = $this->parseidentifier($silence);
  if ($r9===self::$FAILED) {
    $this->currPos = $p7;
    $r9 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // name <- $r9
  if ($r9===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r11 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a43($r6, $r9);
    goto choice_1;
  }
  // free $r4,$r5,$r8,$r10,$r11
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_4
  $p3 = $this->currPos;
  // start seq_5
  $r10 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r10)) {
    $r10 = false;
    $this->currPos = $p3;
  } else {
    $r10 = self::$FAILED;
    if (!$silence) { $this->fail(51); }
    $r11 = self::$FAILED;
    goto seq_5;
  }
  $r11 = $this->parseType($silence);
  if ($r11===self::$FAILED) {
    $this->currPos = $p3;
    $r11 = self::$FAILED;
    goto seq_5;
  }
  seq_5:
  // t <- $r11
  if ($r11===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_4;
  }
  // start seq_6
  $p7 = $this->currPos;
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p7;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r8 = self::$FAILED;
    goto seq_6;
  }
  $r8 = $this->parseidentifier($silence);
  if ($r8===self::$FAILED) {
    $this->currPos = $p7;
    $r8 = self::$FAILED;
    goto seq_6;
  }
  seq_6:
  // name <- $r8
  if ($r8===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  // free $p7
  $this->discard_();
  $r4 = $this->parseDefault($silence);
  // d <- $r4
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r12 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r12 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $this->discard_();
  $r1 = true;
  seq_4:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a44($r11, $r8, $r4);
  }
  // free $r10,$r5,$r12
  // free $p3
  // free $p2
  choice_1:
  return $r1;
}
private function parsestring($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "\"") {
    $r4 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(64); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $p6 = $this->currPos;
  $r5 = strcspn($this->input, "\"", $this->currPos);
  // s <- $r5
  $this->currPos += $r5;
  $r5 = substr($this->input, $p6, $this->currPos - $p6);
  // free $p6
  if (($this->input[$this->currPos] ?? null) === "\"") {
    $r7 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(64); }
    $r7 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a40($r5);
  }
  // free $r4,$r7
  // free $p3
  // free $p2
  return $r1;
}
private function parseEnumValueListComma($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === ",") {
    $r4 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(17); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r5 = $this->parseEnumValueListString($silence);
  // vals <- $r5
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a45($r5);
    goto choice_1;
  }
  // free $r4
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  $r1 = true;
  $this->savedPos = $p2;
  $r1 = $this->a5();
  // free $p2
  choice_1:
  return $r1;
}
private function parseType($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r3)) {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(66); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseSingleType($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  $p2 = $this->currPos;
  // start seq_2
  $p4 = $this->currPos;
  // start seq_3
  $r6 = $this->input[$this->currPos] ?? '';
  if ($r6 === "(") {
    $r6 = false;
    $this->currPos = $p4;
  } else {
    $r6 = self::$FAILED;
    if (!$silence) { $this->fail(67); }
    $r5 = self::$FAILED;
    goto seq_3;
  }
  $r5 = $this->parseUnionType($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p4;
    $r5 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // t <- $r5
  if ($r5===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r7 = $this->parseNull($silence);
  // n <- $r7
  $r1 = true;
  seq_2:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a46($r5, $r7);
  }
  // free $r6
  // free $p4
  // free $p2
  choice_1:
  return $r1;
}
private function parseArgument($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $r4 = $this->parseExtendedAttributeList($silence);
  // e <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p6 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r7)) {
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(68); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parseArgumentRest($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // a <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a47($r4, $r5);
  }
  // free $r7
  // free $p3
  // free $p2
  return $r1;
}
private function parseArguments($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === ",") {
    $r4 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(17); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p6 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r7)) {
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(52); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parseArgument($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // a <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $r8 = $this->parseArguments($silence);
  // rest <- $r8
  if ($r8===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a26($r5, $r8);
    goto choice_1;
  }
  // free $r4,$r7
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  $r1 = true;
  $this->savedPos = $p2;
  $r1 = $this->a5();
  // free $p2
  choice_1:
  return $r1;
}
private function discardstring() {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "\"") {
    $r4 = true;
    $this->currPos++;
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $p6 = $this->currPos;
  $r5 = strcspn($this->input, "\"", $this->currPos);
  // s <- $r5
  $this->currPos += $r5;
  $r5 = substr($this->input, $p6, $this->currPos - $p6);
  // free $p6
  if (($this->input[$this->currPos] ?? null) === "\"") {
    $r7 = true;
    $this->currPos++;
  } else {
    $r7 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a40($r5);
  }
  // free $r4,$r7
  // free $p3
  // free $p2
  return $r1;
}
private function discardinteger() {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $r4 = $this->parseopt_minus(true);
  // m <- $r4
  // start choice_1
  // start seq_2
  $p6 = $this->currPos;
  if (strspn($this->input, "123456789", $this->currPos, 1) !== 0) {
    $r7 = true;
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parsedecimal_integer(true);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r5!==self::$FAILED) {
    goto choice_1;
  }
  // free $p6
  // start seq_3
  $p6 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if ($r8 === "0") {
    $r8 = false;
    $this->currPos = $p6;
  } else {
    $r8 = self::$FAILED;
    $r5 = self::$FAILED;
    goto seq_3;
  }
  $r5 = $this->parsehex_integer(true);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  if ($r5!==self::$FAILED) {
    goto choice_1;
  }
  // free $p6
  // start seq_4
  $p6 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if ($r9 === "0") {
    $r9 = false;
    $this->currPos = $p6;
  } else {
    $r9 = self::$FAILED;
    $r5 = self::$FAILED;
    goto seq_4;
  }
  $r5 = $this->parseoctal_integer(true);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_4;
  }
  seq_4:
  // free $p6
  choice_1:
  // n <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a48($r4, $r5);
  }
  // free $r7,$r8,$r9
  // free $p3
  // free $p2
  return $r1;
}
private function discarddecimal() {
  $p2 = $this->currPos;
  $p4 = $this->currPos;
  // start seq_1
  $p5 = $this->currPos;
  $r6 = $this->parseopt_minus(true);
  // m <- $r6
  // start choice_1
  // start seq_2
  $p8 = $this->currPos;
  // start choice_2
  // start seq_3
  $r10 = strspn($this->input, "0123456789", $this->currPos);
  if ($r10 > 0) {
    $this->currPos += $r10;
  } else {
    $r10 = self::$FAILED;
    $r9 = self::$FAILED;
    goto seq_3;
  }
  if (($this->input[$this->currPos] ?? null) === ".") {
    $r11 = true;
    $this->currPos++;
  } else {
    $r11 = self::$FAILED;
    $this->currPos = $p8;
    $r9 = self::$FAILED;
    goto seq_3;
  }
  $r12 = strspn($this->input, "0123456789", $this->currPos);
  $this->currPos += $r12;
  $r9 = true;
  seq_3:
  if ($r9!==self::$FAILED) {
    goto choice_2;
  }
  // free $r10,$r11,$r12
  // start seq_4
  $r12 = strspn($this->input, "0123456789", $this->currPos);
  $this->currPos += $r12;
  if (($this->input[$this->currPos] ?? null) === ".") {
    $r11 = true;
    $this->currPos++;
  } else {
    $r11 = self::$FAILED;
    $this->currPos = $p8;
    $r9 = self::$FAILED;
    goto seq_4;
  }
  $r10 = strspn($this->input, "0123456789", $this->currPos);
  if ($r10 > 0) {
    $this->currPos += $r10;
  } else {
    $r10 = self::$FAILED;
    $this->currPos = $p8;
    $r9 = self::$FAILED;
    goto seq_4;
  }
  $r9 = true;
  seq_4:
  // free $r12,$r11,$r10
  choice_2:
  if ($r9===self::$FAILED) {
    $r7 = self::$FAILED;
    goto seq_2;
  }
  // start seq_5
  $p13 = $this->currPos;
  $r11 = $this->input[$this->currPos] ?? '';
  if ($r11 === "E" || $r11 === "e") {
    $this->currPos++;
  } else {
    $r11 = self::$FAILED;
    $r10 = self::$FAILED;
    goto seq_5;
  }
  $r12 = $this->input[$this->currPos] ?? '';
  if ($r12 === "+" || $r12 === "-") {
    $this->currPos++;
  } else {
    $r12 = self::$FAILED;
    $r12 = null;
  }
  $r14 = strspn($this->input, "0123456789", $this->currPos);
  if ($r14 > 0) {
    $this->currPos += $r14;
  } else {
    $r14 = self::$FAILED;
    $this->currPos = $p13;
    $r10 = self::$FAILED;
    goto seq_5;
  }
  $r10 = true;
  seq_5:
  if ($r10===self::$FAILED) {
    $r10 = null;
  }
  // free $r11,$r12,$r14
  // free $p13
  $r7 = true;
  seq_2:
  if ($r7!==self::$FAILED) {
    goto choice_1;
  }
  // free $r9,$r10
  // free $p8
  // start seq_6
  $p8 = $this->currPos;
  $r10 = strspn($this->input, "0123456789", $this->currPos);
  if ($r10 > 0) {
    $this->currPos += $r10;
  } else {
    $r10 = self::$FAILED;
    $r7 = self::$FAILED;
    goto seq_6;
  }
  $r9 = $this->input[$this->currPos] ?? '';
  if ($r9 === "E" || $r9 === "e") {
    $this->currPos++;
  } else {
    $r9 = self::$FAILED;
    $this->currPos = $p8;
    $r7 = self::$FAILED;
    goto seq_6;
  }
  $r14 = $this->input[$this->currPos] ?? '';
  if ($r14 === "+" || $r14 === "-") {
    $this->currPos++;
  } else {
    $r14 = self::$FAILED;
    $r14 = null;
  }
  $r12 = strspn($this->input, "0123456789", $this->currPos);
  if ($r12 > 0) {
    $this->currPos += $r12;
  } else {
    $r12 = self::$FAILED;
    $this->currPos = $p8;
    $r7 = self::$FAILED;
    goto seq_6;
  }
  $r7 = true;
  seq_6:
  // free $r10,$r9,$r14,$r12
  // free $p8
  choice_1:
  if ($r7===self::$FAILED) {
    $this->currPos = $p5;
    $r3 = self::$FAILED;
    goto seq_1;
  }
  $r3 = true;
  seq_1:
  // s <- $r3
  if ($r3!==self::$FAILED) {
    $r3 = substr($this->input, $p4, $this->currPos - $p4);
  } else {
    $r3 = self::$FAILED;
  }
  // free $r7
  // free $p5
  // free $p4
  $r1 = $r3;
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a49($r3);
  }
  // free $p2
  return $r1;
}
private function discardOtherOrComma() {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  if (strcspn($this->input, "\x09\x0a\x0d (),[]{}", $this->currPos, 1) !== 0) {
    $r3 = true;
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->discardOther();
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === ",") {
    $r4 = true;
    $this->currPos++;
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  $r1 = true;
  seq_2:
  // free $r4
  // free $p2
  choice_1:
  return $r1;
}
private function discardidentifier() {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start choice_1
  // start seq_2
  if (strspn($this->input, "acdegimnprstu", $this->currPos, 1) !== 0) {
    $r5 = true;
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->discardArgumentNameKeyword();
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r4!==self::$FAILED) {
    goto choice_1;
  }
  // start seq_3
  if (strspn($this->input, "ADFIU", $this->currPos, 1) !== 0) {
    $r6 = true;
    $r6 = false;
    $this->currPos = $p3;
  } else {
    $r6 = self::$FAILED;
    $r4 = self::$FAILED;
    goto seq_3;
  }
  $r4 = $this->discardBufferRelatedType();
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  if ($r4!==self::$FAILED) {
    goto choice_1;
  }
  // start seq_4
  $r7 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[BDFIN-PUa-bdfln-or-u]/A", $r7)) {
    $r7 = false;
    $this->currPos = $p3;
  } else {
    $r7 = self::$FAILED;
    $r4 = self::$FAILED;
    goto seq_4;
  }
  $r4 = $this->discardOtherIdLike();
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_4;
  }
  seq_4:
  choice_1:
  if ($r4 === self::$FAILED) {
    $r4 = false;
  } else {
    $r4 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $p9 = $this->currPos;
  // start seq_5
  // start choice_2
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "_constructor", $this->currPos, 12, false) === 0) {
    $r10 = true;
    $this->currPos += 12;
    goto choice_2;
  } else {
    $r10 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "_toString", $this->currPos, 9, false) === 0) {
    $r10 = true;
    $this->currPos += 9;
    goto choice_2;
  } else {
    $r10 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "toString", $this->currPos, 8, false) === 0) {
    $r10 = true;
    $this->currPos += 8;
  } else {
    $r10 = self::$FAILED;
  }
  choice_2:
  if ($r10===self::$FAILED) {
    $r8 = self::$FAILED;
    goto seq_5;
  }
  $r11 = $this->discardi_();
  if ($r11===self::$FAILED) {
    $this->currPos = $p9;
    $r8 = self::$FAILED;
    goto seq_5;
  }
  $r8 = true;
  seq_5:
  // free $r10,$r11
  if ($r8 === self::$FAILED) {
    $r8 = false;
  } else {
    $r8 = self::$FAILED;
    $this->currPos = $p9;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p9
  $p9 = $this->currPos;
  // start seq_6
  $p12 = $this->currPos;
  $r10 = $this->input[$this->currPos] ?? '';
  if ($r10 === "-" || $r10 === "_") {
    $this->currPos++;
  } else {
    $r10 = self::$FAILED;
    $r10 = null;
  }
  $r13 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[A-Za-z]/A", $r13)) {
    $this->currPos++;
  } else {
    $r13 = self::$FAILED;
    $this->currPos = $p12;
    $r11 = self::$FAILED;
    goto seq_6;
  }
  $r14 = null;
  if (preg_match("/[\\-0-9A-Z_a-z]*/A", $this->input, $r14, 0, $this->currPos)) {
    $this->currPos += strlen($r14[0]);
    $r14 = true;
  } else {
    $r14 = self::$FAILED;
  }
  $r11 = true;
  seq_6:
  // s <- $r11
  if ($r11!==self::$FAILED) {
    $r11 = substr($this->input, $p9, $this->currPos - $p9);
  } else {
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $r10,$r13,$r14
  // free $p12
  // free $p9
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a20($r11);
  }
  // free $r4,$r5,$r6,$r7,$r8
  // free $p3
  // free $p2
  return $r1;
}
private function discardotherchar() {
  // start seq_1
  $p2 = $this->currPos;
  // start seq_2
  if (strspn($this->input, "-.:;<=>?", $this->currPos, 1) !== 0) {
    $r4 = true;
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    $r3 = self::$FAILED;
    goto seq_2;
  }
  $r3 = $this->discardotherterminals();
  if ($r3===self::$FAILED) {
    $this->currPos = $p2;
    $r3 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r3 === self::$FAILED) {
    $r3 = false;
  } else {
    $r3 = self::$FAILED;
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $p6 = $this->currPos;
  $r5 = true;
  if ($r5!==self::$FAILED) {
    $r5 = false;
    $this->currPos = $p6;
  }
  // free $p6
  if (preg_match("/[^\\x09-\\x0a\\x0d (-),0-9A-\\[\\]a-{}]/A", $this->input, $r7, 0, $this->currPos)) {
    $r7 = $r7[0];
    $this->currPos += strlen($r7);
  } else {
    $r7 = self::$FAILED;
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  // free $r3,$r4,$r5,$r7
  // free $p2
  return $r1;
}
private function discardotherterminals() {
  // start choice_1
  if (($this->input[$this->currPos] ?? null) === "-") {
    $r1 = true;
    $this->currPos++;
    goto choice_1;
  } else {
    $r1 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "-Infinity", $this->currPos, 9, false) === 0) {
    $r1 = true;
    $this->currPos += 9;
    goto choice_1;
  } else {
    $r1 = self::$FAILED;
  }
  if (($this->input[$this->currPos] ?? null) === ".") {
    $r1 = true;
    $this->currPos++;
    goto choice_1;
  } else {
    $r1 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "...", $this->currPos, 3, false) === 0) {
    $r1 = true;
    $this->currPos += 3;
    goto choice_1;
  } else {
    $r1 = self::$FAILED;
  }
  if (($this->input[$this->currPos] ?? null) === ":") {
    $r1 = true;
    $this->currPos++;
    goto choice_1;
  } else {
    $r1 = self::$FAILED;
  }
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r1 = true;
    $this->currPos++;
    goto choice_1;
  } else {
    $r1 = self::$FAILED;
  }
  if (($this->input[$this->currPos] ?? null) === "<") {
    $r1 = true;
    $this->currPos++;
    goto choice_1;
  } else {
    $r1 = self::$FAILED;
  }
  if (($this->input[$this->currPos] ?? null) === "=") {
    $r1 = true;
    $this->currPos++;
    goto choice_1;
  } else {
    $r1 = self::$FAILED;
  }
  if (($this->input[$this->currPos] ?? null) === ">") {
    $r1 = true;
    $this->currPos++;
    goto choice_1;
  } else {
    $r1 = self::$FAILED;
  }
  if (($this->input[$this->currPos] ?? null) === "?") {
    $r1 = true;
    $this->currPos++;
  } else {
    $r1 = self::$FAILED;
  }
  choice_1:
  return $r1;
}
private function parseCallbackInterfaceMember($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if ($r3 === "c") {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(69); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseConst($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  $r4 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r4)) {
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(59); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseRegularOperation($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // free $p2
  choice_1:
  return $r1;
}
private function parseInterfaceMembers($silence) {
  $r1 = [];
  for (;;) {
    $p3 = $this->currPos;
    // start seq_1
    $p4 = $this->currPos;
    $r5 = $this->parseleadingComments($silence);
    // c <- $r5
    $r6 = $this->parseExtendedAttributeList($silence);
    // e <- $r6
    if ($r6===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // start seq_2
    $p8 = $this->currPos;
    $r9 = $this->input[$this->currPos] ?? '';
    if (preg_match("/[(\\-A-Z_a-z]/A", $r9)) {
      $r9 = false;
      $this->currPos = $p8;
    } else {
      $r9 = self::$FAILED;
      if (!$silence) { $this->fail(70); }
      $r7 = self::$FAILED;
      goto seq_2;
    }
    $r7 = $this->parseInterfaceMember($silence);
    if ($r7===self::$FAILED) {
      $this->currPos = $p8;
      $r7 = self::$FAILED;
      goto seq_2;
    }
    seq_2:
    // m <- $r7
    if ($r7===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // free $p8
    $r2 = true;
    seq_1:
    if ($r2!==self::$FAILED) {
      $this->savedPos = $p3;
      $r2 = $this->a21($r5, $r6, $r7);
      $r1[] = $r2;
    } else {
      break;
    }
    // free $r9
    // free $p4
    // free $p3
  }
  // free $r2
  return $r1;
}
private function parsec_($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $r3 = [];
  for (;;) {
    // start choice_1
    $p5 = $this->currPos;
    $r4 = $this->input[$this->currPos] ?? '';
    if ($r4 === "\x09" || $r4 === " ") {
      $this->currPos++;
      $this->savedPos = $p5;
      $r4 = $this->a50();
      goto choice_1;
    } else {
      $r4 = self::$FAILED;
      if (!$silence) { $this->fail(71); }
    }
    // free $p5
    $p5 = $this->currPos;
    // start seq_2
    $p6 = $this->currPos;
    $r7 = $this->input[$this->currPos] ?? '';
    if ($r7 === "/") {
      $r7 = false;
      $this->currPos = $p6;
    } else {
      $r7 = self::$FAILED;
      if (!$silence) { $this->fail(56); }
      $r4 = self::$FAILED;
      goto seq_2;
    }
    $r4 = $this->discardcomment();
    if ($r4===self::$FAILED) {
      $this->currPos = $p6;
      $r4 = self::$FAILED;
      goto seq_2;
    }
    seq_2:
    if ($r4!==self::$FAILED) {
      $r4 = substr($this->input, $p5, $this->currPos - $p5);
    } else {
      $r4 = self::$FAILED;
    }
    // free $p6
    // free $p5
    choice_1:
    if ($r4!==self::$FAILED) {
      $r3[] = $r4;
    } else {
      break;
    }
  }
  // r <- $r3
  // free $r4
  // free $r7
  $this->discard_();
  $r1 = true;
  seq_1:
  $this->savedPos = $p2;
  $r1 = $this->a51($r3);
  // free $p2
  return $r1;
}
private function parseMixinMembers($silence) {
  $r1 = [];
  for (;;) {
    $p3 = $this->currPos;
    // start seq_1
    $p4 = $this->currPos;
    $r5 = $this->parseleadingComments($silence);
    // c <- $r5
    $r6 = $this->parseExtendedAttributeList($silence);
    // e <- $r6
    if ($r6===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // start seq_2
    $p8 = $this->currPos;
    $r9 = $this->input[$this->currPos] ?? '';
    if (preg_match("/[(\\-A-Z_a-z]/A", $r9)) {
      $r9 = false;
      $this->currPos = $p8;
    } else {
      $r9 = self::$FAILED;
      if (!$silence) { $this->fail(72); }
      $r7 = self::$FAILED;
      goto seq_2;
    }
    $r7 = $this->parseMixinMember($silence);
    if ($r7===self::$FAILED) {
      $this->currPos = $p8;
      $r7 = self::$FAILED;
      goto seq_2;
    }
    seq_2:
    // m <- $r7
    if ($r7===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // free $p8
    $r2 = true;
    seq_1:
    if ($r2!==self::$FAILED) {
      $this->savedPos = $p3;
      $r2 = $this->a21($r5, $r6, $r7);
      $r1[] = $r2;
    } else {
      break;
    }
    // free $r9
    // free $p4
    // free $p3
  }
  // free $r2
  return $r1;
}
private function parseRegularOperation($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(51); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parseType($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_3
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(73); }
    $r6 = self::$FAILED;
    goto seq_3;
  }
  $r6 = $this->parseOperationRest($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // o <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a52($r4, $r6);
  }
  // free $r5,$r8
  // free $p3
  // free $p2
  return $r1;
}
private function parseAttributeRest($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "attribute", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
  } else {
    if (!$silence) { $this->fail(74); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(33); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseTypeWithExtendedAttributes($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  // start seq_3
  $p7 = $this->currPos;
  $r10 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r10)) {
    $r10 = false;
    $this->currPos = $p7;
  } else {
    $r10 = self::$FAILED;
    if (!$silence) { $this->fail(75); }
    $r9 = self::$FAILED;
    goto seq_3;
  }
  $r9 = $this->parseAttributeName($silence);
  if ($r9===self::$FAILED) {
    $this->currPos = $p7;
    $r9 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // name <- $r9
  if ($r9===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r11 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r12 = $this->parsec_($silence);
  // c <- $r12
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a53($r6, $r9, $r12);
  }
  // free $r4,$r5,$r8,$r10,$r11
  // free $p3
  // free $p2
  return $r1;
}
private function parsePartialInterfaceRest($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r5)) {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parseidentifier($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // name <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "{") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(24); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r7 = $this->parsePartialInterfaceMembers($silence);
  // m <- $r7
  if (($this->input[$this->currPos] ?? null) === "}") {
    $r8 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(25); }
    $r8 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r9 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r9 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a54($r4, $r7);
  }
  // free $r5,$r6,$r8,$r9
  // free $p3
  // free $p2
  return $r1;
}
private function parseDefault($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "=") {
    $r4 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(37); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p6 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\"\\--.0-9IN\\[fnt{]/A", $r7)) {
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(76); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parseDefaultValue($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // val <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a55($r5);
  } else {
    $r1 = null;
  }
  // free $r4,$r7
  // free $p3
  // free $p2
  return $r1;
}
private function parseEnumValueListString($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  $r5 = $this->input[$this->currPos] ?? '';
  if ($r5 === "\"") {
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(50); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parsestring($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // s <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r6 = $this->parseEnumValueListComma($silence);
  // vals <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a56($r4, $r6);
    goto choice_1;
  }
  // free $r5
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  $r1 = true;
  $this->savedPos = $p2;
  $r1 = $this->a5();
  // free $p2
  choice_1:
  return $r1;
}
private function parseSingleType($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r3)) {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(77); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseDistinguishableType($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  $r4 = $this->input[$this->currPos] ?? '';
  if ($r4 === "a") {
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(78); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseAnyType($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  $r5 = $this->input[$this->currPos] ?? '';
  if ($r5 === "P") {
    $r5 = false;
    $this->currPos = $p2;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(79); }
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->parsePromiseType($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // free $p2
  choice_1:
  return $r1;
}
private function parseUnionType($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r4 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(35); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p6 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r7)) {
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(80); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parseUnionMemberType($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $r8 = [];
  for (;;) {
    $p6 = $this->currPos;
    // start seq_3
    $p10 = $this->currPos;
    if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "or", $this->currPos, 2, false) === 0) {
      $r11 = true;
      $this->currPos += 2;
    } else {
      if (!$silence) { $this->fail(81); }
      $r11 = self::$FAILED;
      $r9 = self::$FAILED;
      goto seq_3;
    }
    $r12 = $this->discardi_();
    if ($r12===self::$FAILED) {
      $this->currPos = $p10;
      $r9 = self::$FAILED;
      goto seq_3;
    }
    // start seq_4
    $p14 = $this->currPos;
    $r15 = $this->input[$this->currPos] ?? '';
    if (preg_match("/[(\\-A-\\[_a-z]/A", $r15)) {
      $r15 = false;
      $this->currPos = $p14;
    } else {
      $r15 = self::$FAILED;
      if (!$silence) { $this->fail(80); }
      $r13 = self::$FAILED;
      goto seq_4;
    }
    $r13 = $this->parseUnionMemberType($silence);
    if ($r13===self::$FAILED) {
      $this->currPos = $p14;
      $r13 = self::$FAILED;
      goto seq_4;
    }
    seq_4:
    // t2 <- $r13
    if ($r13===self::$FAILED) {
      $this->currPos = $p10;
      $r9 = self::$FAILED;
      goto seq_3;
    }
    // free $p14
    $r9 = true;
    seq_3:
    if ($r9!==self::$FAILED) {
      $this->savedPos = $p6;
      $r9 = $this->a57($r5, $r13);
      $r8[] = $r9;
    } else {
      break;
    }
    // free $r11,$r12,$r15
    // free $p10
    // free $p6
  }
  if (count($r8) === 0) {
    $r8 = self::$FAILED;
  }
  // rest <- $r8
  if ($r8===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $r9
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r9 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(36); }
    $r9 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a58($r5, $r8);
  }
  // free $r4,$r7,$r9
  // free $p3
  // free $p2
  return $r1;
}
private function parseNull($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "?") {
    $r4 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(82); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a59();
  } else {
    $r1 = null;
  }
  // free $r4
  // free $p3
  // free $p2
  return $r1;
}
private function parseArgumentRest($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "optional", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(83); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(33); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseTypeWithExtendedAttributes($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  // start seq_3
  $p7 = $this->currPos;
  $r10 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r10)) {
    $r10 = false;
    $this->currPos = $p7;
  } else {
    $r10 = self::$FAILED;
    if (!$silence) { $this->fail(84); }
    $r9 = self::$FAILED;
    goto seq_3;
  }
  $r9 = $this->parseArgumentName($silence);
  if ($r9===self::$FAILED) {
    $this->currPos = $p7;
    $r9 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // name <- $r9
  if ($r9===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r11 = $this->parseDefault($silence);
  // d <- $r11
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a60($r6, $r9, $r11);
    goto choice_1;
  }
  // free $r4,$r5,$r8,$r10
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_4
  $p3 = $this->currPos;
  // start seq_5
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p3;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(51); }
    $r10 = self::$FAILED;
    goto seq_5;
  }
  $r10 = $this->parseType($silence);
  if ($r10===self::$FAILED) {
    $this->currPos = $p3;
    $r10 = self::$FAILED;
    goto seq_5;
  }
  seq_5:
  // t <- $r10
  if ($r10===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $r5 = $this->parseEllipsis($silence);
  // e <- $r5
  // start seq_6
  $p7 = $this->currPos;
  $r12 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r12)) {
    $r12 = false;
    $this->currPos = $p7;
  } else {
    $r12 = self::$FAILED;
    if (!$silence) { $this->fail(84); }
    $r4 = self::$FAILED;
    goto seq_6;
  }
  $r4 = $this->parseArgumentName($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p7;
    $r4 = self::$FAILED;
    goto seq_6;
  }
  seq_6:
  // name <- $r4
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  // free $p7
  $r1 = true;
  seq_4:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a61($r10, $r5, $r4);
  }
  // free $r8,$r12
  // free $p3
  // free $p2
  choice_1:
  return $r1;
}
private function parseopt_minus($silence) {
  // start choice_1
  $p2 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "-") {
    $r1 = true;
    $this->currPos++;
    $this->savedPos = $p2;
    $r1 = $this->a62();
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(85); }
    $r1 = self::$FAILED;
  }
  // free $p2
  $p2 = $this->currPos;
  $r1 = true;
  $this->savedPos = $p2;
  $r1 = $this->a63();
  // free $p2
  choice_1:
  return $r1;
}
private function parsedecimal_integer($silence) {
  $p2 = $this->currPos;
  $p4 = $this->currPos;
  // start seq_1
  $p5 = $this->currPos;
  if (strspn($this->input, "123456789", $this->currPos, 1) !== 0) {
    $r6 = true;
    $this->currPos++;
  } else {
    $r6 = self::$FAILED;
    if (!$silence) { $this->fail(86); }
    $r3 = self::$FAILED;
    goto seq_1;
  }
  $r7 = strspn($this->input, "0123456789", $this->currPos);
  $this->currPos += $r7;
  $r3 = true;
  seq_1:
  // s <- $r3
  if ($r3!==self::$FAILED) {
    $r3 = substr($this->input, $p4, $this->currPos - $p4);
  } else {
    $r3 = self::$FAILED;
  }
  // free $r6,$r7
  // free $p5
  // free $p4
  $r1 = $r3;
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a64($r3);
  }
  // free $p2
  return $r1;
}
private function parsehex_integer($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start choice_1
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "0x", $this->currPos, 2, false) === 0) {
    $r4 = true;
    $this->currPos += 2;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(88); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "0X", $this->currPos, 2, false) === 0) {
    $r4 = true;
    $this->currPos += 2;
  } else {
    if (!$silence) { $this->fail(89); }
    $r4 = self::$FAILED;
  }
  choice_1:
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $p6 = $this->currPos;
  $r5 = null;
  // s <- $r5
  if (preg_match("/[0-9A-Fa-f]+/A", $this->input, $r5, 0, $this->currPos)) {
    $this->currPos += strlen($r5[0]);
    $r5 = true;
    $r5 = substr($this->input, $p6, $this->currPos - $p6);
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(90); }
    $r5 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a65($r5);
  }
  // free $r4
  // free $p3
  // free $p2
  return $r1;
}
private function parseoctal_integer($silence) {
  $p2 = $this->currPos;
  $p4 = $this->currPos;
  // start seq_1
  $p5 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "0") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(91); }
    $r6 = self::$FAILED;
    $r3 = self::$FAILED;
    goto seq_1;
  }
  $r7 = strspn($this->input, "01234567", $this->currPos);
  $this->currPos += $r7;
  $r3 = true;
  seq_1:
  // s <- $r3
  if ($r3!==self::$FAILED) {
    $r3 = substr($this->input, $p4, $this->currPos - $p4);
  } else {
    $r3 = self::$FAILED;
  }
  // free $r6,$r7
  // free $p5
  // free $p4
  $r1 = $r3;
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a66($r3);
  }
  // free $p2
  return $r1;
}
private function parseConst($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "const", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
  } else {
    if (!$silence) { $this->fail(93); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(94); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseConstType($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  // start seq_3
  $p7 = $this->currPos;
  $r10 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r10)) {
    $r10 = false;
    $this->currPos = $p7;
  } else {
    $r10 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r9 = self::$FAILED;
    goto seq_3;
  }
  $r9 = $this->parseidentifier($silence);
  if ($r9===self::$FAILED) {
    $this->currPos = $p7;
    $r9 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // name <- $r9
  if ($r9===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "=") {
    $r11 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(37); }
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_4
  $p7 = $this->currPos;
  if (strspn($this->input, "-.0123456789INft", $this->currPos, 1) !== 0) {
    $r13 = true;
    $r13 = false;
    $this->currPos = $p7;
  } else {
    $r13 = self::$FAILED;
    if (!$silence) { $this->fail(95); }
    $r12 = self::$FAILED;
    goto seq_4;
  }
  $r12 = $this->parseConstValue($silence);
  if ($r12===self::$FAILED) {
    $this->currPos = $p7;
    $r12 = self::$FAILED;
    goto seq_4;
  }
  seq_4:
  // v <- $r12
  if ($r12===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r14 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r14 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r15 = $this->parsec_($silence);
  // c <- $r15
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a67($r6, $r9, $r12, $r15);
  }
  // free $r4,$r5,$r8,$r10,$r11,$r13,$r14
  // free $p3
  // free $p2
  return $r1;
}
private function parseInterfaceMember($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r3)) {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(96); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parsePartialInterfaceMember($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  $r4 = $this->input[$this->currPos] ?? '';
  if ($r4 === "c") {
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(97); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseConstructor($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // free $p2
  choice_1:
  return $r1;
}
private function parseMixinMember($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if ($r3 === "c") {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(69); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseConst($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  $r4 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r4)) {
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(59); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseRegularOperation($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  $r5 = $this->input[$this->currPos] ?? '';
  if ($r5 === "s") {
    $r5 = false;
    $this->currPos = $p2;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(98); }
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->parseStringifier($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  $p2 = $this->currPos;
  // start seq_4
  $p6 = $this->currPos;
  $r7 = $this->parseOptionalReadOnly($silence);
  // ro <- $r7
  // start seq_5
  $p9 = $this->currPos;
  $r10 = $this->input[$this->currPos] ?? '';
  if ($r10 === "a") {
    $r10 = false;
    $this->currPos = $p9;
  } else {
    $r10 = self::$FAILED;
    if (!$silence) { $this->fail(61); }
    $r8 = self::$FAILED;
    goto seq_5;
  }
  $r8 = $this->parseAttributeRest($silence);
  if ($r8===self::$FAILED) {
    $this->currPos = $p9;
    $r8 = self::$FAILED;
    goto seq_5;
  }
  seq_5:
  // a <- $r8
  if ($r8===self::$FAILED) {
    $this->currPos = $p6;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  // free $p9
  $r1 = true;
  seq_4:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a68($r7, $r8);
  }
  // free $r10
  // free $p6
  // free $p2
  choice_1:
  return $r1;
}
private function parseOperationRest($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $r4 = $this->parseOptionalOperationName($silence);
  // name <- $r4
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r5 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(35); }
    $r5 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r6 = $this->parseArgumentList($silence);
  // args <- $r6
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r7 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(36); }
    $r7 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r8 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r8 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r9 = $this->parsec_($silence);
  // c <- $r9
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a69($r4, $r6, $r9);
  }
  // free $r5,$r7,$r8
  // free $p3
  // free $p2
  return $r1;
}
private function parseAttributeName($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if ($r3 === "a" || $r3 === "r") {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(99); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseAttributeNameKeyword($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  $p2 = $this->currPos;
  // start seq_2
  $p4 = $this->currPos;
  // start seq_3
  $r6 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r6)) {
    $r6 = false;
    $this->currPos = $p4;
  } else {
    $r6 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r5 = self::$FAILED;
    goto seq_3;
  }
  $r5 = $this->parseidentifier($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p4;
    $r5 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // id <- $r5
  if ($r5===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  $r1 = true;
  seq_2:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a70($r5);
  }
  // free $r6
  // free $p4
  // free $p2
  choice_1:
  return $r1;
}
private function parsePartialInterfaceMembers($silence) {
  $r1 = [];
  for (;;) {
    $p3 = $this->currPos;
    // start seq_1
    $p4 = $this->currPos;
    $r5 = $this->parseleadingComments($silence);
    // c <- $r5
    $r6 = $this->parseExtendedAttributeList($silence);
    // e <- $r6
    if ($r6===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // start seq_2
    $p8 = $this->currPos;
    $r9 = $this->input[$this->currPos] ?? '';
    if (preg_match("/[(\\-A-Z_a-z]/A", $r9)) {
      $r9 = false;
      $this->currPos = $p8;
    } else {
      $r9 = self::$FAILED;
      if (!$silence) { $this->fail(96); }
      $r7 = self::$FAILED;
      goto seq_2;
    }
    $r7 = $this->parsePartialInterfaceMember($silence);
    if ($r7===self::$FAILED) {
      $this->currPos = $p8;
      $r7 = self::$FAILED;
      goto seq_2;
    }
    seq_2:
    // m <- $r7
    if ($r7===self::$FAILED) {
      $this->currPos = $p4;
      $r2 = self::$FAILED;
      goto seq_1;
    }
    // free $p8
    $r2 = true;
    seq_1:
    if ($r2!==self::$FAILED) {
      $this->savedPos = $p3;
      $r2 = $this->a21($r5, $r6, $r7);
      $r1[] = $r2;
    } else {
      break;
    }
    // free $r9
    // free $p4
    // free $p3
  }
  // free $r2
  return $r1;
}
private function parseDefaultValue($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  if (strspn($this->input, "-.0123456789INft", $this->currPos, 1) !== 0) {
    $r3 = true;
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(95); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseConstValue($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  $p2 = $this->currPos;
  // start seq_2
  $p4 = $this->currPos;
  // start seq_3
  $r6 = $this->input[$this->currPos] ?? '';
  if ($r6 === "\"") {
    $r6 = false;
    $this->currPos = $p4;
  } else {
    $r6 = self::$FAILED;
    if (!$silence) { $this->fail(50); }
    $r5 = self::$FAILED;
    goto seq_3;
  }
  $r5 = $this->parsestring($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p4;
    $r5 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // s <- $r5
  if ($r5===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  $r1 = true;
  seq_2:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a71($r5);
    goto choice_1;
  }
  // free $r6
  // free $p4
  // free $p2
  $p2 = $this->currPos;
  // start seq_4
  $p4 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "[") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(2); }
    $r6 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "]") {
    $r7 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(4); }
    $r7 = self::$FAILED;
    $this->currPos = $p4;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $this->discard_();
  $r1 = true;
  seq_4:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a72();
    goto choice_1;
  }
  // free $r6,$r7
  // free $p4
  // free $p2
  $p2 = $this->currPos;
  // start seq_5
  $p4 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "{") {
    $r7 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(24); }
    $r7 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_5;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === "}") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(25); }
    $r6 = self::$FAILED;
    $this->currPos = $p4;
    $r1 = self::$FAILED;
    goto seq_5;
  }
  $this->discard_();
  $r1 = true;
  seq_5:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a73();
    goto choice_1;
  }
  // free $r7,$r6
  // free $p4
  // free $p2
  $p2 = $this->currPos;
  // start seq_6
  $p4 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "null", $this->currPos, 4, false) === 0) {
    $r6 = true;
    $this->currPos += 4;
  } else {
    if (!$silence) { $this->fail(100); }
    $r6 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_6;
  }
  $r7 = $this->discardi_();
  if ($r7===self::$FAILED) {
    $this->currPos = $p4;
    $r1 = self::$FAILED;
    goto seq_6;
  }
  $r1 = true;
  seq_6:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a74();
  }
  // free $r6,$r7
  // free $p4
  // free $p2
  choice_1:
  return $r1;
}
private function parseDistinguishableType($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start choice_1
  // start seq_2
  if (strspn($this->input, "bdflosu", $this->currPos, 1) !== 0) {
    $r6 = true;
    $r6 = false;
    $this->currPos = $p3;
  } else {
    $r6 = self::$FAILED;
    if (!$silence) { $this->fail(101); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parsePrimitiveType($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r5
  $r4 = $r5;
  if ($r4!==self::$FAILED) {
    $this->savedPos = $p3;
    $r4 = $this->a75($r5);
    goto choice_1;
  }
  // free $r6
  // start seq_3
  if (strspn($this->input, "BDU", $this->currPos, 1) !== 0) {
    $r7 = true;
    $r7 = false;
    $this->currPos = $p3;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(102); }
    $r6 = self::$FAILED;
    goto seq_3;
  }
  $r6 = $this->parseStringType($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r6 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // t <- $r6
  $r4 = $r6;
  if ($r4!==self::$FAILED) {
    $this->savedPos = $p3;
    $r4 = $this->a75($r6);
    goto choice_1;
  }
  // free $r7
  // start seq_4
  // start choice_2
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "object", $this->currPos, 6, false) === 0) {
    $r7 = "object";
    $this->currPos += 6;
    goto choice_2;
  } else {
    if (!$silence) { $this->fail(103); }
    $r7 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "symbol", $this->currPos, 6, false) === 0) {
    $r7 = "symbol";
    $this->currPos += 6;
  } else {
    if (!$silence) { $this->fail(104); }
    $r7 = self::$FAILED;
  }
  choice_2:
  // t <- $r7
  if ($r7===self::$FAILED) {
    $r4 = self::$FAILED;
    goto seq_4;
  }
  $r8 = $this->discardi_();
  if ($r8===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_4;
  }
  $r4 = true;
  seq_4:
  if ($r4!==self::$FAILED) {
    $this->savedPos = $p3;
    $r4 = $this->a75($r7);
    goto choice_1;
  }
  // free $r8
  // start seq_5
  if (strspn($this->input, "ADFIU", $this->currPos, 1) !== 0) {
    $r9 = true;
    $r9 = false;
    $this->currPos = $p3;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(105); }
    $r8 = self::$FAILED;
    goto seq_5;
  }
  $r8 = $this->parseBufferRelatedType($silence);
  if ($r8===self::$FAILED) {
    $this->currPos = $p3;
    $r8 = self::$FAILED;
    goto seq_5;
  }
  seq_5:
  // t <- $r8
  $r4 = $r8;
  if ($r4!==self::$FAILED) {
    $this->savedPos = $p3;
    $r4 = $this->a75($r8);
    goto choice_1;
  }
  // free $r9
  // start seq_6
  // start choice_3
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "sequence", $this->currPos, 8, false) === 0) {
    $r9 = "sequence";
    $this->currPos += 8;
    goto choice_3;
  } else {
    if (!$silence) { $this->fail(106); }
    $r9 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "FrozenArray", $this->currPos, 11, false) === 0) {
    $r9 = "FrozenArray";
    $this->currPos += 11;
    goto choice_3;
  } else {
    if (!$silence) { $this->fail(107); }
    $r9 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "ObservableArray", $this->currPos, 15, false) === 0) {
    $r9 = "ObservableArray";
    $this->currPos += 15;
  } else {
    if (!$silence) { $this->fail(108); }
    $r9 = self::$FAILED;
  }
  choice_3:
  // g <- $r9
  if ($r9===self::$FAILED) {
    $r4 = self::$FAILED;
    goto seq_6;
  }
  $r10 = $this->discardi_();
  if ($r10===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_6;
  }
  if (($this->input[$this->currPos] ?? null) === "<") {
    $r11 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(109); }
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_6;
  }
  $this->discard_();
  // start seq_7
  $p13 = $this->currPos;
  $r14 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r14)) {
    $r14 = false;
    $this->currPos = $p13;
  } else {
    $r14 = self::$FAILED;
    if (!$silence) { $this->fail(33); }
    $r12 = self::$FAILED;
    goto seq_7;
  }
  $r12 = $this->parseTypeWithExtendedAttributes($silence);
  if ($r12===self::$FAILED) {
    $this->currPos = $p13;
    $r12 = self::$FAILED;
    goto seq_7;
  }
  seq_7:
  // t <- $r12
  if ($r12===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_6;
  }
  // free $p13
  if (($this->input[$this->currPos] ?? null) === ">") {
    $r15 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(110); }
    $r15 = self::$FAILED;
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_6;
  }
  $this->discard_();
  $r4 = true;
  seq_6:
  if ($r4!==self::$FAILED) {
    $this->savedPos = $p3;
    $r4 = $this->a76($r9, $r12);
    goto choice_1;
  }
  // free $r10,$r11,$r14,$r15
  // start seq_8
  $r15 = $this->input[$this->currPos] ?? '';
  if ($r15 === "r") {
    $r15 = false;
    $this->currPos = $p3;
  } else {
    $r15 = self::$FAILED;
    if (!$silence) { $this->fail(111); }
    $r4 = self::$FAILED;
    goto seq_8;
  }
  $r4 = $this->parseRecordType($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_8;
  }
  seq_8:
  if ($r4!==self::$FAILED) {
    goto choice_1;
  }
  // start seq_9
  // start seq_10
  $r11 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r11)) {
    $r11 = false;
    $this->currPos = $p3;
  } else {
    $r11 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r14 = self::$FAILED;
    goto seq_10;
  }
  $r14 = $this->parseidentifier($silence);
  if ($r14===self::$FAILED) {
    $this->currPos = $p3;
    $r14 = self::$FAILED;
    goto seq_10;
  }
  seq_10:
  // t <- $r14
  if ($r14===self::$FAILED) {
    $r4 = self::$FAILED;
    goto seq_9;
  }
  $this->discard_();
  $r4 = true;
  seq_9:
  if ($r4!==self::$FAILED) {
    $this->savedPos = $p3;
    $r4 = $this->a77($r14);
  }
  // free $r11
  choice_1:
  // dt <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r11 = $this->parseNull($silence);
  // n <- $r11
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a78($r4, $r11);
  }
  // free $r15
  // free $p3
  // free $p2
  return $r1;
}
private function parseAnyType($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "any", $this->currPos, 3, false) === 0) {
    $r4 = true;
    $this->currPos += 3;
  } else {
    if (!$silence) { $this->fail(112); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a79();
  }
  // free $r4,$r5
  // free $p3
  // free $p2
  return $r1;
}
private function parsePromiseType($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Promise", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
  } else {
    if (!$silence) { $this->fail(113); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  if (($this->input[$this->currPos] ?? null) === "<") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(109); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p8 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r9)) {
    $r9 = false;
    $this->currPos = $p8;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(51); }
    $r7 = self::$FAILED;
    goto seq_2;
  }
  $r7 = $this->parseType($silence);
  if ($r7===self::$FAILED) {
    $this->currPos = $p8;
    $r7 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r7
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p8
  if (($this->input[$this->currPos] ?? null) === ">") {
    $r10 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(110); }
    $r10 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a80($r7);
  }
  // free $r4,$r5,$r6,$r9,$r10
  // free $p3
  // free $p2
  return $r1;
}
private function parseUnionMemberType($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $r4 = $this->parseExtendedAttributeList($silence);
  // e <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p6 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r7)) {
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(77); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parseDistinguishableType($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a25($r4, $r5);
    goto choice_1;
  }
  // free $r7
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_3
  $p3 = $this->currPos;
  // start seq_4
  $r8 = $this->input[$this->currPos] ?? '';
  if ($r8 === "(") {
    $r8 = false;
    $this->currPos = $p3;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(67); }
    $r7 = self::$FAILED;
    goto seq_4;
  }
  $r7 = $this->parseUnionType($silence);
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r7 = self::$FAILED;
    goto seq_4;
  }
  seq_4:
  // t <- $r7
  if ($r7===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r9 = $this->parseNull($silence);
  // n <- $r9
  $r1 = true;
  seq_3:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a81($r7, $r9);
  }
  // free $r8
  // free $p3
  // free $p2
  choice_1:
  return $r1;
}
private function parseArgumentName($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  if (strspn($this->input, "acdegimnprstu", $this->currPos, 1) !== 0) {
    $r3 = true;
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(114); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseArgumentNameKeyword($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  $p2 = $this->currPos;
  // start seq_2
  $p4 = $this->currPos;
  // start seq_3
  $r6 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r6)) {
    $r6 = false;
    $this->currPos = $p4;
  } else {
    $r6 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r5 = self::$FAILED;
    goto seq_3;
  }
  $r5 = $this->parseidentifier($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p4;
    $r5 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // name <- $r5
  if ($r5===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  $r1 = true;
  seq_2:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a82($r5);
  }
  // free $r6
  // free $p4
  // free $p2
  choice_1:
  return $r1;
}
private function parseEllipsis($silence) {
  // start seq_1
  $p2 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "...", $this->currPos, 3, false) === 0) {
    $r3 = "...";
    $this->currPos += 3;
  } else {
    if (!$silence) { $this->fail(115); }
    $r3 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r4 = $this->parse_($silence);
  $r1 = [$r3,$r4];
  seq_1:
  if ($r1===self::$FAILED) {
    $r1 = null;
  }
  // free $r3,$r4
  // free $p2
  return $r1;
}
private function parseConstType($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p4 = $this->currPos;
  if (strspn($this->input, "bdflosu", $this->currPos, 1) !== 0) {
    $r5 = true;
    $r5 = false;
    $this->currPos = $p4;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(101); }
    $r3 = self::$FAILED;
    goto seq_1;
  }
  $r3 = $this->parsePrimitiveType($silence);
  if ($r3===self::$FAILED) {
    $this->currPos = $p4;
    $r3 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  // t <- $r3
  // free $p4
  $r1 = $r3;
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a83($r3);
    goto choice_1;
  }
  // free $r5
  // free $p2
  $p2 = $this->currPos;
  // start seq_2
  $p4 = $this->currPos;
  // start seq_3
  $r6 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r6)) {
    $r6 = false;
    $this->currPos = $p4;
  } else {
    $r6 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r5 = self::$FAILED;
    goto seq_3;
  }
  $r5 = $this->parseidentifier($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p4;
    $r5 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // t <- $r5
  if ($r5===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  $r1 = true;
  seq_2:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a83($r5);
  }
  // free $r6
  // free $p4
  // free $p2
  choice_1:
  return $r1;
}
private function parseConstValue($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if ($r3 === "f" || $r3 === "t") {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(116); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseBooleanLiteral($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  if (strspn($this->input, "-.0123456789IN", $this->currPos, 1) !== 0) {
    $r4 = true;
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(117); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseFloatLiteral($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  if (strspn($this->input, "-0123456789", $this->currPos, 1) !== 0) {
    $r5 = true;
    $r5 = false;
    $this->currPos = $p2;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(118); }
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->parseIntLiteral($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // free $p2
  choice_1:
  return $r1;
}
private function parsePartialInterfaceMember($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if ($r3 === "c") {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(69); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseConst($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  $r4 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r4)) {
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(119); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseOperation($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  $r5 = $this->input[$this->currPos] ?? '';
  if ($r5 === "s") {
    $r5 = false;
    $this->currPos = $p2;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(98); }
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->parseStringifier($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_4
  $p2 = $this->currPos;
  $r6 = $this->input[$this->currPos] ?? '';
  if ($r6 === "s") {
    $r6 = false;
    $this->currPos = $p2;
  } else {
    $r6 = self::$FAILED;
    if (!$silence) { $this->fail(120); }
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $r1 = $this->parseStaticMember($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  seq_4:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_5
  $p2 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if ($r7 === "i") {
    $r7 = false;
    $this->currPos = $p2;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(121); }
    $r1 = self::$FAILED;
    goto seq_5;
  }
  $r1 = $this->parseIterable($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_5;
  }
  seq_5:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_6
  $p2 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if ($r8 === "a") {
    $r8 = false;
    $this->currPos = $p2;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(122); }
    $r1 = self::$FAILED;
    goto seq_6;
  }
  $r1 = $this->parseAsyncIterable($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_6;
  }
  seq_6:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_7
  $p2 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if ($r9 === "r") {
    $r9 = false;
    $this->currPos = $p2;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(123); }
    $r1 = self::$FAILED;
    goto seq_7;
  }
  $r1 = $this->parseReadOnlyMember($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_7;
  }
  seq_7:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_8
  $p2 = $this->currPos;
  $r10 = $this->input[$this->currPos] ?? '';
  if ($r10 === "a") {
    $r10 = false;
    $this->currPos = $p2;
  } else {
    $r10 = self::$FAILED;
    if (!$silence) { $this->fail(61); }
    $r1 = self::$FAILED;
    goto seq_8;
  }
  $r1 = $this->parseAttributeRest($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_8;
  }
  seq_8:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_9
  $p2 = $this->currPos;
  $r11 = $this->input[$this->currPos] ?? '';
  if ($r11 === "m") {
    $r11 = false;
    $this->currPos = $p2;
  } else {
    $r11 = self::$FAILED;
    if (!$silence) { $this->fail(124); }
    $r1 = self::$FAILED;
    goto seq_9;
  }
  $r1 = $this->parseMaplikeRest($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_9;
  }
  seq_9:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_10
  $p2 = $this->currPos;
  $r12 = $this->input[$this->currPos] ?? '';
  if ($r12 === "s") {
    $r12 = false;
    $this->currPos = $p2;
  } else {
    $r12 = self::$FAILED;
    if (!$silence) { $this->fail(125); }
    $r1 = self::$FAILED;
    goto seq_10;
  }
  $r1 = $this->parseSetlikeRest($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_10;
  }
  seq_10:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_11
  $p2 = $this->currPos;
  $r13 = $this->input[$this->currPos] ?? '';
  if ($r13 === "i") {
    $r13 = false;
    $this->currPos = $p2;
  } else {
    $r13 = self::$FAILED;
    if (!$silence) { $this->fail(126); }
    $r1 = self::$FAILED;
    goto seq_11;
  }
  $r1 = $this->parseInheritAttribute($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_11;
  }
  seq_11:
  // free $p2
  choice_1:
  return $r1;
}
private function parseConstructor($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "constructor", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
  } else {
    if (!$silence) { $this->fail(127); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(35); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r7 = $this->parseArgumentList($silence);
  // args <- $r7
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r8 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(36); }
    $r8 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r9 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r9 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r10 = $this->parsec_($silence);
  // c <- $r10
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a84($r7, $r10);
  }
  // free $r4,$r5,$r6,$r8,$r9
  // free $p3
  // free $p2
  return $r1;
}
private function parseStringifier($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "stringifier", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
  } else {
    if (!$silence) { $this->fail(128); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-;A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(129); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseStringifierRest($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // rest <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a85($r6);
  }
  // free $r4,$r5,$r8
  // free $p3
  // free $p2
  return $r1;
}
private function parseOptionalReadOnly($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "readonly", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(60); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a59();
  } else {
    $r1 = null;
  }
  // free $r4,$r5
  // free $p3
  // free $p2
  return $r1;
}
private function parseOptionalOperationName($silence) {
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r3)) {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(130); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseOperationName($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1===self::$FAILED) {
    $r1 = null;
  }
  // free $p2
  return $r1;
}
private function parseAttributeNameKeyword($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // start choice_1
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "async", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(131); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "required", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(63); }
    $r4 = self::$FAILED;
  }
  choice_1:
  // id <- $r4
  if ($r4!==self::$FAILED) {
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p5
  $r6 = $this->discardi_();
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a70($r4);
  }
  // free $r6
  // free $p3
  // free $p2
  return $r1;
}
private function parsePrimitiveType($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  if (strspn($this->input, "lsu", $this->currPos, 1) !== 0) {
    $r3 = true;
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(132); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseUnsignedIntegerType($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  if (strspn($this->input, "dfu", $this->currPos, 1) !== 0) {
    $r4 = true;
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(133); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseUnrestrictedFloatType($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  $p2 = $this->currPos;
  // start seq_3
  $p5 = $this->currPos;
  $p7 = $this->currPos;
  // start choice_2
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "undefined", $this->currPos, 9, false) === 0) {
    $r6 = true;
    $this->currPos += 9;
    goto choice_2;
  } else {
    if (!$silence) { $this->fail(134); }
    $r6 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "boolean", $this->currPos, 7, false) === 0) {
    $r6 = true;
    $this->currPos += 7;
    goto choice_2;
  } else {
    if (!$silence) { $this->fail(135); }
    $r6 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "byte", $this->currPos, 4, false) === 0) {
    $r6 = true;
    $this->currPos += 4;
    goto choice_2;
  } else {
    if (!$silence) { $this->fail(136); }
    $r6 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "octet", $this->currPos, 5, false) === 0) {
    $r6 = true;
    $this->currPos += 5;
    goto choice_2;
  } else {
    if (!$silence) { $this->fail(137); }
    $r6 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "bigint", $this->currPos, 6, false) === 0) {
    $r6 = true;
    $this->currPos += 6;
  } else {
    if (!$silence) { $this->fail(138); }
    $r6 = self::$FAILED;
  }
  choice_2:
  // v <- $r6
  if ($r6!==self::$FAILED) {
    $r6 = substr($this->input, $p7, $this->currPos - $p7);
  } else {
    $r6 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  // free $p7
  $r8 = $this->discardi_();
  if ($r8===self::$FAILED) {
    $this->currPos = $p5;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = true;
  seq_3:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a86($r6);
  }
  // free $r8
  // free $p5
  // free $p2
  choice_1:
  return $r1;
}
private function parseStringType($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // start choice_1
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "ByteString", $this->currPos, 10, false) === 0) {
    $r4 = true;
    $this->currPos += 10;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(139); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "DOMString", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(140); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "USVString", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
  } else {
    if (!$silence) { $this->fail(141); }
    $r4 = self::$FAILED;
  }
  choice_1:
  // s <- $r4
  if ($r4!==self::$FAILED) {
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p5
  $r6 = $this->discardi_();
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a40($r4);
  }
  // free $r6
  // free $p3
  // free $p2
  return $r1;
}
private function parseBufferRelatedType($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // start choice_1
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "ArrayBuffer", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(142); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "DataView", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(143); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Int8Array", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(144); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Int16Array", $this->currPos, 10, false) === 0) {
    $r4 = true;
    $this->currPos += 10;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(145); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Int32Array", $this->currPos, 10, false) === 0) {
    $r4 = true;
    $this->currPos += 10;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(146); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Uint8Array", $this->currPos, 10, false) === 0) {
    $r4 = true;
    $this->currPos += 10;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(147); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Uint16Array", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(148); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Uint32Array", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(149); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Uint8ClampedArray", $this->currPos, 17, false) === 0) {
    $r4 = true;
    $this->currPos += 17;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(150); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Float32Array", $this->currPos, 12, false) === 0) {
    $r4 = true;
    $this->currPos += 12;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(151); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Float64Array", $this->currPos, 12, false) === 0) {
    $r4 = true;
    $this->currPos += 12;
  } else {
    if (!$silence) { $this->fail(152); }
    $r4 = self::$FAILED;
  }
  choice_1:
  // s <- $r4
  if ($r4!==self::$FAILED) {
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p5
  $r6 = $this->discardi_();
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a40($r4);
  }
  // free $r6
  // free $p3
  // free $p2
  return $r1;
}
private function parseRecordType($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "record", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
  } else {
    if (!$silence) { $this->fail(153); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  if (($this->input[$this->currPos] ?? null) === "<") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(109); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p8 = $this->currPos;
  if (strspn($this->input, "BDU", $this->currPos, 1) !== 0) {
    $r9 = true;
    $r9 = false;
    $this->currPos = $p8;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(102); }
    $r7 = self::$FAILED;
    goto seq_2;
  }
  $r7 = $this->parseStringType($silence);
  if ($r7===self::$FAILED) {
    $this->currPos = $p8;
    $r7 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t1 <- $r7
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p8
  if (($this->input[$this->currPos] ?? null) === ",") {
    $r10 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(17); }
    $r10 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_3
  $p8 = $this->currPos;
  $r12 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r12)) {
    $r12 = false;
    $this->currPos = $p8;
  } else {
    $r12 = self::$FAILED;
    if (!$silence) { $this->fail(33); }
    $r11 = self::$FAILED;
    goto seq_3;
  }
  $r11 = $this->parseTypeWithExtendedAttributes($silence);
  if ($r11===self::$FAILED) {
    $this->currPos = $p8;
    $r11 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // t2 <- $r11
  if ($r11===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p8
  if (($this->input[$this->currPos] ?? null) === ">") {
    $r13 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(110); }
    $r13 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a87($r7, $r11);
  }
  // free $r4,$r5,$r6,$r9,$r10,$r12,$r13
  // free $p3
  // free $p2
  return $r1;
}
private function parseArgumentNameKeyword($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // start choice_1
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "async", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(131); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "attribute", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(74); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "callback", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(18); }
    $r4 = self::$FAILED;
  }
  // start seq_2
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "const", $this->currPos, 5, false) === 0) {
    $r6 = true;
    $this->currPos += 5;
  } else {
    if (!$silence) { $this->fail(93); }
    $r6 = self::$FAILED;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $p8 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if (!(preg_match("/[\\-0-9A-Z_a-z]/A", $r7))) {
    $r7 = self::$FAILED;
  }
  if ($r7 === self::$FAILED) {
    $r7 = false;
  } else {
    $r7 = self::$FAILED;
    $this->currPos = $p8;
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  // free $p8
  $r4 = true;
  seq_2:
  if ($r4!==self::$FAILED) {
    goto choice_1;
  }
  // free $r6,$r7
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "constructor", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(127); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "deleter", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(154); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "dictionary", $this->currPos, 10, false) === 0) {
    $r4 = true;
    $this->currPos += 10;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(29); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "enum", $this->currPos, 4, false) === 0) {
    $r4 = true;
    $this->currPos += 4;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(30); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "getter", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(155); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "includes", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(34); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "inherit", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(156); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "interface", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(20); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "iterable", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(157); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "maplike", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(158); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "mixin", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(58); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "namespace", $this->currPos, 9, false) === 0) {
    $r4 = true;
    $this->currPos += 9;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(22); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "partial", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(27); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "readonly", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(60); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "required", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(63); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "setlike", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(159); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "setter", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(160); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "static", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(161); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "stringifier", $this->currPos, 11, false) === 0) {
    $r4 = true;
    $this->currPos += 11;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(128); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "typedef", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(32); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "unrestricted", $this->currPos, 12, false) === 0) {
    $r4 = true;
    $this->currPos += 12;
  } else {
    if (!$silence) { $this->fail(162); }
    $r4 = self::$FAILED;
  }
  choice_1:
  // k <- $r4
  if ($r4!==self::$FAILED) {
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p5
  $r7 = $this->discardi_();
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a39($r4);
  }
  // free $r7
  // free $p3
  // free $p2
  return $r1;
}
private function parseBooleanLiteral($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // start choice_1
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "true", $this->currPos, 4, false) === 0) {
    $r4 = true;
    $this->currPos += 4;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(163); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "false", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
  } else {
    if (!$silence) { $this->fail(164); }
    $r4 = self::$FAILED;
  }
  choice_1:
  // v <- $r4
  if ($r4!==self::$FAILED) {
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p5
  $r6 = $this->discardi_();
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a88($r4);
  }
  // free $r6
  // free $p3
  // free $p2
  return $r1;
}
private function parseFloatLiteral($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // start seq_2
  if (strspn($this->input, "-.0123456789", $this->currPos, 1) !== 0) {
    $r6 = true;
    $r6 = false;
    $this->currPos = $p3;
  } else {
    $r6 = self::$FAILED;
    if (!$silence) { $this->fail(54); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->discarddecimal();
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // s <- $r4
  if ($r4!==self::$FAILED) {
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p5
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a89($r4);
    goto choice_1;
  }
  // free $r6
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_3
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "-Infinity", $this->currPos, 9, false) === 0) {
    $r6 = true;
    $this->currPos += 9;
  } else {
    if (!$silence) { $this->fail(165); }
    $r6 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r7 = $this->discardi_();
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = true;
  seq_3:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a90();
    goto choice_1;
  }
  // free $r6,$r7
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_4
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "Infinity", $this->currPos, 8, false) === 0) {
    $r7 = true;
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(166); }
    $r7 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $r6 = $this->discardi_();
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $r1 = true;
  seq_4:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a91();
    goto choice_1;
  }
  // free $r7,$r6
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_5
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "NaN", $this->currPos, 3, false) === 0) {
    $r6 = true;
    $this->currPos += 3;
  } else {
    if (!$silence) { $this->fail(167); }
    $r6 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_5;
  }
  $r7 = $this->discardi_();
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_5;
  }
  $r1 = true;
  seq_5:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a92();
  }
  // free $r6,$r7
  // free $p3
  // free $p2
  choice_1:
  return $r1;
}
private function parseIntLiteral($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // start seq_2
  if (strspn($this->input, "-0123456789", $this->currPos, 1) !== 0) {
    $r7 = true;
    $r7 = false;
    $this->currPos = $p3;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(53); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseinteger($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // i <- $r6
  $r4 = $r6;
  // s <- $r4
  if ($r4!==self::$FAILED) {
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $r7
  // free $p5
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a89($r4);
  }
  // free $p3
  // free $p2
  return $r1;
}
private function parseOperation($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r3)) {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(59); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseRegularOperation($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  if (strspn($this->input, "dgs", $this->currPos, 1) !== 0) {
    $r4 = true;
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(168); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseSpecialOperation($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // free $p2
  choice_1:
  return $r1;
}
private function parseStaticMember($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "static", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
  } else {
    if (!$silence) { $this->fail(161); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(169); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseStaticMemberRest($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // rest <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a93($r6);
  }
  // free $r4,$r5,$r8
  // free $p3
  // free $p2
  return $r1;
}
private function parseIterable($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "iterable", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(157); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  if (($this->input[$this->currPos] ?? null) === "<") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(109); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p8 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r9)) {
    $r9 = false;
    $this->currPos = $p8;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(33); }
    $r7 = self::$FAILED;
    goto seq_2;
  }
  $r7 = $this->parseTypeWithExtendedAttributes($silence);
  if ($r7===self::$FAILED) {
    $this->currPos = $p8;
    $r7 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t1 <- $r7
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p8
  $r10 = $this->parseOptionalType($silence);
  // t2 <- $r10
  if (($this->input[$this->currPos] ?? null) === ">") {
    $r11 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(110); }
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r12 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r12 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r13 = $this->parsec_($silence);
  // c <- $r13
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a94($r7, $r10, $r13);
  }
  // free $r4,$r5,$r6,$r9,$r11,$r12
  // free $p3
  // free $p2
  return $r1;
}
private function parseAsyncIterable($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "async", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
  } else {
    if (!$silence) { $this->fail(131); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "iterable", $this->currPos, 8, false) === 0) {
    $r6 = true;
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(157); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r7 = $this->discardi_();
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  if (($this->input[$this->currPos] ?? null) === "<") {
    $r8 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(109); }
    $r8 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p10 = $this->currPos;
  $r11 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r11)) {
    $r11 = false;
    $this->currPos = $p10;
  } else {
    $r11 = self::$FAILED;
    if (!$silence) { $this->fail(33); }
    $r9 = self::$FAILED;
    goto seq_2;
  }
  $r9 = $this->parseTypeWithExtendedAttributes($silence);
  if ($r9===self::$FAILED) {
    $this->currPos = $p10;
    $r9 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t1 <- $r9
  if ($r9===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p10
  $r12 = $this->parseOptionalType($silence);
  // t2 <- $r12
  if (($this->input[$this->currPos] ?? null) === ">") {
    $r13 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(110); }
    $r13 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r14 = $this->parseOptionalArgumentList($silence);
  // args <- $r14
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r15 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r15 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r16 = $this->parsec_($silence);
  // c <- $r16
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a95($r9, $r12, $r14, $r16);
  }
  // free $r4,$r5,$r6,$r7,$r8,$r11,$r13,$r15
  // free $p3
  // free $p2
  return $r1;
}
private function parseReadOnlyMember($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "readonly", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(60); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  if (strspn($this->input, "ams", $this->currPos, 1) !== 0) {
    $r8 = true;
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(170); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseReadOnlyMemberRest($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // m <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a96($r6);
  }
  // free $r4,$r5,$r8
  // free $p3
  // free $p2
  return $r1;
}
private function parseMaplikeRest($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "maplike", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
  } else {
    if (!$silence) { $this->fail(158); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  if (($this->input[$this->currPos] ?? null) === "<") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(109); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p8 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r9)) {
    $r9 = false;
    $this->currPos = $p8;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(33); }
    $r7 = self::$FAILED;
    goto seq_2;
  }
  $r7 = $this->parseTypeWithExtendedAttributes($silence);
  if ($r7===self::$FAILED) {
    $this->currPos = $p8;
    $r7 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t1 <- $r7
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p8
  if (($this->input[$this->currPos] ?? null) === ",") {
    $r10 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(17); }
    $r10 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_3
  $p8 = $this->currPos;
  $r12 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r12)) {
    $r12 = false;
    $this->currPos = $p8;
  } else {
    $r12 = self::$FAILED;
    if (!$silence) { $this->fail(33); }
    $r11 = self::$FAILED;
    goto seq_3;
  }
  $r11 = $this->parseTypeWithExtendedAttributes($silence);
  if ($r11===self::$FAILED) {
    $this->currPos = $p8;
    $r11 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // t2 <- $r11
  if ($r11===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p8
  if (($this->input[$this->currPos] ?? null) === ">") {
    $r13 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(110); }
    $r13 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r14 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r14 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r15 = $this->parsec_($silence);
  // c <- $r15
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a97($r7, $r11, $r15);
  }
  // free $r4,$r5,$r6,$r9,$r10,$r12,$r13,$r14
  // free $p3
  // free $p2
  return $r1;
}
private function parseSetlikeRest($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "setlike", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
  } else {
    if (!$silence) { $this->fail(159); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  if (($this->input[$this->currPos] ?? null) === "<") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(109); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p8 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r9)) {
    $r9 = false;
    $this->currPos = $p8;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(33); }
    $r7 = self::$FAILED;
    goto seq_2;
  }
  $r7 = $this->parseTypeWithExtendedAttributes($silence);
  if ($r7===self::$FAILED) {
    $this->currPos = $p8;
    $r7 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r7
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p8
  if (($this->input[$this->currPos] ?? null) === ">") {
    $r10 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(110); }
    $r10 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r11 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r11 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r12 = $this->parsec_($silence);
  // c <- $r12
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a98($r7, $r12);
  }
  // free $r4,$r5,$r6,$r9,$r10,$r11
  // free $p3
  // free $p2
  return $r1;
}
private function parseInheritAttribute($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "inherit", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
  } else {
    if (!$silence) { $this->fail(156); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if ($r8 === "a") {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(61); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseAttributeRest($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // a <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a99($r6);
  }
  // free $r4,$r5,$r8
  // free $p3
  // free $p2
  return $r1;
}
private function parseStringifierRest($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $r4 = $this->parseOptionalReadOnly($silence);
  // ro <- $r4
  // start seq_2
  $p6 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if ($r7 === "a") {
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(61); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parseAttributeRest($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // a <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a100($r4, $r5);
    goto choice_1;
  }
  // free $r7
  // free $p3
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r7)) {
    $r7 = false;
    $this->currPos = $p2;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(59); }
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->parseRegularOperation($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  $p2 = $this->currPos;
  // start seq_4
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === ";") {
    $r8 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(26); }
    $r8 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_4;
  }
  $r9 = $this->parsec_($silence);
  // c <- $r9
  $r1 = true;
  seq_4:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a101($r9);
  }
  // free $r8
  // free $p3
  // free $p2
  choice_1:
  return $r1;
}
private function parseOperationName($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if ($r3 === "i") {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(171); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseOperationNameKeyword($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  $p2 = $this->currPos;
  // start seq_2
  $p4 = $this->currPos;
  // start seq_3
  $r6 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[\\-A-Z_a-z]/A", $r6)) {
    $r6 = false;
    $this->currPos = $p4;
  } else {
    $r6 = self::$FAILED;
    if (!$silence) { $this->fail(23); }
    $r5 = self::$FAILED;
    goto seq_3;
  }
  $r5 = $this->parseidentifier($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p4;
    $r5 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // name <- $r5
  if ($r5===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $this->discard_();
  $r1 = true;
  seq_2:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a82($r5);
  }
  // free $r6
  // free $p4
  // free $p2
  choice_1:
  return $r1;
}
private function parseUnsignedIntegerType($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "unsigned", $this->currPos, 8, false) === 0) {
    $r4 = true;
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(172); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if ($r8 === "l" || $r8 === "s") {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(173); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseIntegerType($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a102($r6);
    goto choice_1;
  }
  // free $r4,$r5,$r8
  // free $p3
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if ($r8 === "l" || $r8 === "s") {
    $r8 = false;
    $this->currPos = $p2;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(173); }
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->parseIntegerType($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // free $p2
  choice_1:
  return $r1;
}
private function parseUnrestrictedFloatType($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "unrestricted", $this->currPos, 12, false) === 0) {
    $r4 = true;
    $this->currPos += 12;
  } else {
    if (!$silence) { $this->fail(162); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_2
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if ($r8 === "d" || $r8 === "f") {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(174); }
    $r6 = self::$FAILED;
    goto seq_2;
  }
  $r6 = $this->parseFloatType($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a103($r6);
    goto choice_1;
  }
  // free $r4,$r5,$r8
  // free $p3
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if ($r8 === "d" || $r8 === "f") {
    $r8 = false;
    $this->currPos = $p2;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(174); }
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->parseFloatType($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // free $p2
  choice_1:
  return $r1;
}
private function parseinteger($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $r4 = $this->parseopt_minus($silence);
  // m <- $r4
  // start choice_1
  // start seq_2
  $p6 = $this->currPos;
  if (strspn($this->input, "123456789", $this->currPos, 1) !== 0) {
    $r7 = true;
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(175); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parsedecimal_integer($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r5!==self::$FAILED) {
    goto choice_1;
  }
  // free $p6
  // start seq_3
  $p6 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if ($r8 === "0") {
    $r8 = false;
    $this->currPos = $p6;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(176); }
    $r5 = self::$FAILED;
    goto seq_3;
  }
  $r5 = $this->parsehex_integer($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  if ($r5!==self::$FAILED) {
    goto choice_1;
  }
  // free $p6
  // start seq_4
  $p6 = $this->currPos;
  $r9 = $this->input[$this->currPos] ?? '';
  if ($r9 === "0") {
    $r9 = false;
    $this->currPos = $p6;
  } else {
    $r9 = self::$FAILED;
    if (!$silence) { $this->fail(177); }
    $r5 = self::$FAILED;
    goto seq_4;
  }
  $r5 = $this->parseoctal_integer($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_4;
  }
  seq_4:
  // free $p6
  choice_1:
  // n <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a48($r4, $r5);
  }
  // free $r7,$r8,$r9
  // free $p3
  // free $p2
  return $r1;
}
private function parseSpecialOperation($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // start seq_2
  if (strspn($this->input, "dgs", $this->currPos, 1) !== 0) {
    $r5 = true;
    $r5 = false;
    $this->currPos = $p3;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(178); }
    $r4 = self::$FAILED;
    goto seq_2;
  }
  $r4 = $this->parseSpecial($silence);
  if ($r4===self::$FAILED) {
    $this->currPos = $p3;
    $r4 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // s <- $r4
  if ($r4===self::$FAILED) {
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // start seq_3
  $p7 = $this->currPos;
  $r8 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r8)) {
    $r8 = false;
    $this->currPos = $p7;
  } else {
    $r8 = self::$FAILED;
    if (!$silence) { $this->fail(59); }
    $r6 = self::$FAILED;
    goto seq_3;
  }
  $r6 = $this->parseRegularOperation($silence);
  if ($r6===self::$FAILED) {
    $this->currPos = $p7;
    $r6 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // o <- $r6
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p7
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a104($r4, $r6);
  }
  // free $r5,$r8
  // free $p3
  // free $p2
  return $r1;
}
private function parseStaticMemberRest($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $r4 = $this->parseOptionalReadOnly($silence);
  // ro <- $r4
  // start seq_2
  $p6 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if ($r7 === "a") {
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(61); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parseAttributeRest($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // a <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a100($r4, $r5);
    goto choice_1;
  }
  // free $r7
  // free $p3
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-Z_a-z]/A", $r7)) {
    $r7 = false;
    $this->currPos = $p2;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(59); }
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->parseRegularOperation($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // free $p2
  choice_1:
  return $r1;
}
private function parseOptionalType($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === ",") {
    $r4 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(17); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  // start seq_2
  $p6 = $this->currPos;
  $r7 = $this->input[$this->currPos] ?? '';
  if (preg_match("/[(\\-A-\\[_a-z]/A", $r7)) {
    $r7 = false;
    $this->currPos = $p6;
  } else {
    $r7 = self::$FAILED;
    if (!$silence) { $this->fail(33); }
    $r5 = self::$FAILED;
    goto seq_2;
  }
  $r5 = $this->parseTypeWithExtendedAttributes($silence);
  if ($r5===self::$FAILED) {
    $this->currPos = $p6;
    $r5 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  // t <- $r5
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p6
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a105($r5);
  } else {
    $r1 = null;
  }
  // free $r4,$r7
  // free $p3
  // free $p2
  return $r1;
}
private function parseOptionalArgumentList($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  if (($this->input[$this->currPos] ?? null) === "(") {
    $r4 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(35); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r5 = $this->parseArgumentList($silence);
  // args <- $r5
  if (($this->input[$this->currPos] ?? null) === ")") {
    $r6 = true;
    $this->currPos++;
  } else {
    if (!$silence) { $this->fail(36); }
    $r6 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $this->discard_();
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a106($r5);
  } else {
    $r1 = null;
  }
  // free $r4,$r6
  // free $p3
  // free $p2
  return $r1;
}
private function parseReadOnlyMemberRest($silence) {
  // start choice_1
  // start seq_1
  $p2 = $this->currPos;
  $r3 = $this->input[$this->currPos] ?? '';
  if ($r3 === "a") {
    $r3 = false;
    $this->currPos = $p2;
  } else {
    $r3 = self::$FAILED;
    if (!$silence) { $this->fail(61); }
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = $this->parseAttributeRest($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  seq_1:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_2
  $p2 = $this->currPos;
  $r4 = $this->input[$this->currPos] ?? '';
  if ($r4 === "m") {
    $r4 = false;
    $this->currPos = $p2;
  } else {
    $r4 = self::$FAILED;
    if (!$silence) { $this->fail(124); }
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r1 = $this->parseMaplikeRest($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  seq_2:
  if ($r1!==self::$FAILED) {
    goto choice_1;
  }
  // free $p2
  // start seq_3
  $p2 = $this->currPos;
  $r5 = $this->input[$this->currPos] ?? '';
  if ($r5 === "s") {
    $r5 = false;
    $this->currPos = $p2;
  } else {
    $r5 = self::$FAILED;
    if (!$silence) { $this->fail(125); }
    $r1 = self::$FAILED;
    goto seq_3;
  }
  $r1 = $this->parseSetlikeRest($silence);
  if ($r1===self::$FAILED) {
    $this->currPos = $p2;
    $r1 = self::$FAILED;
    goto seq_3;
  }
  seq_3:
  // free $p2
  choice_1:
  return $r1;
}
private function parseOperationNameKeyword($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  // s <- $r4
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "includes", $this->currPos, 8, false) === 0) {
    $r4 = "includes";
    $this->currPos += 8;
  } else {
    if (!$silence) { $this->fail(34); }
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->discardi_();
  if ($r5===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a40($r4);
  }
  // free $r5
  // free $p3
  // free $p2
  return $r1;
}
private function parseIntegerType($silence) {
  // start choice_1
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // s <- $r4
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "short", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    if (!$silence) { $this->fail(179); }
    $r4 = self::$FAILED;
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p5
  $r6 = $this->discardi_();
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a40($r4);
    goto choice_1;
  }
  // free $r6
  // free $p3
  // free $p2
  $p2 = $this->currPos;
  // start seq_2
  $p3 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "long", $this->currPos, 4, false) === 0) {
    $r6 = true;
    $this->currPos += 4;
  } else {
    if (!$silence) { $this->fail(180); }
    $r6 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  $r7 = $this->discardi_();
  if ($r7===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_2;
  }
  // start seq_3
  $p5 = $this->currPos;
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "long", $this->currPos, 4, false) === 0) {
    $r9 = "long";
    $this->currPos += 4;
  } else {
    if (!$silence) { $this->fail(180); }
    $r9 = self::$FAILED;
    $r8 = self::$FAILED;
    goto seq_3;
  }
  $r10 = $this->parsei_($silence);
  if ($r10===self::$FAILED) {
    $this->currPos = $p5;
    $r8 = self::$FAILED;
    goto seq_3;
  }
  $r8 = [$r9,$r10];
  seq_3:
  if ($r8===self::$FAILED) {
    $r8 = null;
  }
  // free $r9,$r10
  // free $p5
  // l <- $r8
  $r1 = true;
  seq_2:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a107($r8);
  }
  // free $r6,$r7
  // free $p3
  // free $p2
  choice_1:
  return $r1;
}
private function parseFloatType($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // start choice_1
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "float", $this->currPos, 5, false) === 0) {
    $r4 = true;
    $this->currPos += 5;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(181); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "double", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
  } else {
    if (!$silence) { $this->fail(182); }
    $r4 = self::$FAILED;
  }
  choice_1:
  // v <- $r4
  if ($r4!==self::$FAILED) {
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p5
  $r6 = $this->discardi_();
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a86($r4);
  }
  // free $r6
  // free $p3
  // free $p2
  return $r1;
}
private function parseSpecial($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $p5 = $this->currPos;
  // start choice_1
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "getter", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(155); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "setter", $this->currPos, 6, false) === 0) {
    $r4 = true;
    $this->currPos += 6;
    goto choice_1;
  } else {
    if (!$silence) { $this->fail(160); }
    $r4 = self::$FAILED;
  }
  if ($this->currPos >= $this->inputLength ? false : substr_compare($this->input, "deleter", $this->currPos, 7, false) === 0) {
    $r4 = true;
    $this->currPos += 7;
  } else {
    if (!$silence) { $this->fail(154); }
    $r4 = self::$FAILED;
  }
  choice_1:
  // s <- $r4
  if ($r4!==self::$FAILED) {
    $r4 = substr($this->input, $p5, $this->currPos - $p5);
  } else {
    $r4 = self::$FAILED;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  // free $p5
  $r6 = $this->discardi_();
  if ($r6===self::$FAILED) {
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a40($r4);
  }
  // free $r6
  // free $p3
  // free $p2
  return $r1;
}
private function parsei_($silence) {
  $p2 = $this->currPos;
  // start seq_1
  $p3 = $this->currPos;
  $r4 = $this->input[$this->currPos] ?? '';
  if (!(preg_match("/[\\-0-9A-Z_a-z]/A", $r4))) {
    $r4 = self::$FAILED;
  }
  if ($r4 === self::$FAILED) {
    $r4 = false;
  } else {
    $r4 = self::$FAILED;
    $this->currPos = $p3;
    $r1 = self::$FAILED;
    goto seq_1;
  }
  $r5 = $this->parse_($silence);
  // c <- $r5
  $r1 = true;
  seq_1:
  if ($r1!==self::$FAILED) {
    $this->savedPos = $p2;
    $r1 = $this->a7($r5);
  }
  // free $r4
  // free $p3
  // free $p2
  return $r1;
}

	public function parse( $input, $options = [] ) {
		$this->initInternal( $input, $options );
		$startRule = $options['startRule'] ?? '(DEFAULT)';
		$result = null;

		if ( !empty( $options['stream'] ) ) {
			switch ( $startRule ) {
				
			default:
				throw new \Wikimedia\WikiPEG\InternalError( "Can't stream rule $startRule." );
			}
		} else {
			switch ( $startRule ) {
				case '(DEFAULT)':
case "start":
  $result = $this->parsestart(false);
  break;
			default:
				throw new \Wikimedia\WikiPEG\InternalError( "Can't start parsing from rule $startRule." );
			}
		}

		if ( $result !== self::$FAILED && $this->currPos === $this->inputLength ) {
			return $result;
		} else {
			if ( $result !== self::$FAILED && $this->currPos < $this->inputLength ) {
				$this->fail( 0 );
			}
			throw $this->buildParseException();
		}
	}
}

